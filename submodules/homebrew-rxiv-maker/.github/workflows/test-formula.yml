name: Test Formula

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      test-scope:
        description: 'Test scope'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'syntax-only'
          - 'quick'
      force-install:
        description: 'Force formula installation (ignore cache)'
        required: false
        default: false
        type: boolean
  schedule:
    # Test weekly on Sundays at 6 AM UTC to catch upstream changes
    - cron: '0 6 * * 0'

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  actions: read
  checks: write

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_ANALYTICS: 1

jobs:
  syntax-validation:
    name: Syntax and URL Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          core: false
          cask: false
          test-bot: false

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.cache/Homebrew
          key: ${{ runner.os }}-homebrew-${{ hashFiles('Formula/rxiv-maker.rb') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-

      - name: Validate formula syntax
        run: |
          echo "üîç Validating formula syntax..."

          # Test formula parsing
          brew info --formula ./Formula/rxiv-maker.rb

          # Basic audit (skip strict checks for development)
          brew audit --formula ./Formula/rxiv-maker.rb

          echo "‚úÖ Formula syntax validation passed"

      - name: Verify PyPI package URL and version
        run: |
          echo "üåê Verifying PyPI package..."

          # Extract version and URL from formula
          FORMULA_VERSION=$(grep -E 'rxiv_maker-[0-9.]+\.tar\.gz' Formula/rxiv-maker.rb | sed 's/.*rxiv_maker-\([0-9.]*\)\.tar\.gz.*/\1/')
          PACKAGE_URL=$(grep -E '^\s*url' Formula/rxiv-maker.rb | sed 's/.*"\(.*\)".*/\1/')

          echo "Formula version: $FORMULA_VERSION"
          echo "Package URL: $PACKAGE_URL"

          # Verify URL is accessible with retries
          for i in {1..3}; do
            if curl -I -f "$PACKAGE_URL" --max-time 30; then
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå Failed to verify URL after 3 attempts"
              exit 1
            else
              echo "‚ö†Ô∏è URL verification attempt $i failed, retrying..."
              sleep 5
            fi
          done

          # Verify version exists on PyPI with retries
          for i in {1..3}; do
            if curl -f "https://pypi.org/pypi/rxiv-maker/$FORMULA_VERSION/json" > /dev/null; then
              break
            elif [ $i -eq 3 ]; then
              echo "‚ùå Failed to verify PyPI version after 3 attempts"
              exit 1
            else
              echo "‚ö†Ô∏è PyPI verification attempt $i failed, retrying..."
              sleep 5
            fi
          done

          echo "‚úÖ PyPI package verification passed"

  formula-installation:
    name: Formula Installation Test
    needs: syntax-validation
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            install-texlive: true
          - os: macos-latest
            install-texlive: true
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          core: false
          cask: false
          test-bot: false

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Caches/Homebrew
            ~/.cache/Homebrew
            /opt/homebrew/Library/Caches
          key: ${{ runner.os }}-${{ matrix.os }}-homebrew-${{ hashFiles('Formula/rxiv-maker.rb') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.os }}-homebrew-

      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            libfreetype6-dev \
            libjpeg-dev \
            libpng-dev \
            pkg-config

      - name: Clean and install formula
        run: |
          echo "üîß Installing rxiv-maker formula..."

          # Clean any existing installations
          echo "üßπ Cleaning existing installations..."
          brew uninstall rxiv-maker --ignore-dependencies || true
          brew cleanup --prune=all

          # Install formula with retry logic
          echo "üîß Installing rxiv-maker formula..."
          MAX_ATTEMPTS=2
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            echo "üì¶ Installation attempt $attempt of $MAX_ATTEMPTS"

            if [ "${{ inputs.force-install }}" = "true" ]; then
              if brew install --force --formula --verbose ./Formula/rxiv-maker.rb; then
                echo "‚úÖ Formula installation succeeded on attempt $attempt"
                break
              fi
            else
              if brew install --formula --verbose ./Formula/rxiv-maker.rb; then
                echo "‚úÖ Formula installation succeeded on attempt $attempt"
                break
              fi
            fi

            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå Formula installation failed after $MAX_ATTEMPTS attempts"
              exit 1
            else
              echo "‚ö†Ô∏è Installation attempt $attempt failed, cleaning up and retrying..."
              brew uninstall rxiv-maker --ignore-dependencies || true
              brew cleanup --prune=all
              sleep 10
            fi
          done

          echo "‚úÖ Formula installation completed"

      - name: Verify CLI functionality
        run: |
          echo "üîç Verifying CLI functionality..."

          # Basic CLI tests
          which rxiv
          rxiv --version
          rxiv --help

          # Test installation check command
          rxiv check-installation || echo "check-installation may require LaTeX"

          echo "‚úÖ CLI functionality verified"

      - name: Test LaTeX integration
        if: matrix.install-texlive
        run: |
          echo "üìÑ Testing LaTeX integration..."

          # Verify texlive dependency was installed
          if command -v pdflatex >/dev/null 2>&1; then
            echo "‚úÖ LaTeX (pdflatex) is available: $(which pdflatex)"
            pdflatex --version | head -1
          else
            echo "‚ùå LaTeX not found - texlive dependency may not be working"
            exit 1
          fi

          echo "‚úÖ LaTeX integration verified"

      - name: Test manuscript operations
        run: |
          echo "üß™ Testing manuscript operations..."

          # Create test directory
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"
          echo "Working in: $TEMP_DIR"

          # Test manuscript initialization
          if rxiv init test-manuscript --no-interactive 2>/dev/null; then
            echo "‚úÖ Manuscript initialization successful"
            cd test-manuscript

            # Verify expected files exist
            for file in "00_CONFIG.yml" "01_MAIN.md" "03_REFERENCES.bib"; do
              if [ -f "$file" ]; then
                echo "‚úì Found $file"
              else
                echo "- $file not found (may use different structure)"
              fi
            done

            # Test validation
            if rxiv validate --no-doi 2>/dev/null; then
              echo "‚úÖ Manuscript validation passed"
            else
              echo "‚ö†Ô∏è Validation failed (may require additional setup)"
            fi
          else
            echo "‚ÑπÔ∏è Manuscript initialization may require different syntax"
          fi

          echo "‚úÖ Manuscript operations test completed"

      - name: Test Python environment isolation
        run: |
          echo "üêç Testing Python environment isolation..."

          # Find rxiv-maker installation
          RXIV_PREFIX=$(brew --prefix rxiv-maker)
          RXIV_VENV="$RXIV_PREFIX/libexec"

          echo "Installation prefix: $RXIV_PREFIX"
          echo "Virtual environment: $RXIV_VENV"

          # Test virtual environment isolation
          "$RXIV_VENV/bin/python" -c "import sys; print(f'Python executable: {sys.executable}'); print(f'Python version: {sys.version.split()[0]}'); is_isolated = 'homebrew' in sys.prefix.lower() or 'cellar' in sys.prefix.lower(); print('‚úÖ Virtual environment properly isolated' if is_isolated else '‚ùå Virtual environment not isolated'); exit(0 if is_isolated else 1)"

          # Test that rxiv_maker is NOT accessible from system Python
          if python3 -c "import rxiv_maker" 2>/dev/null; then
            echo "‚ùå rxiv_maker accessible from system Python (not properly isolated)"
            exit 1
          else
            echo "‚úÖ rxiv_maker properly isolated from system Python"
          fi

          echo "‚úÖ Python environment isolation verified"

  comprehensive-testing:
    name: Comprehensive Testing
    needs: formula-installation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'schedule' || inputs.test-scope == 'full'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master
        with:
          core: false
          cask: false
          test-bot: false

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/Homebrew
          key: ${{ runner.os }}-homebrew-comprehensive-${{ hashFiles('Formula/rxiv-maker.rb') }}
          restore-keys: |
            ${{ runner.os }}-homebrew-comprehensive-

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config

      - name: Install and test formula comprehensively
        run: |
          echo "üîß Installing formula for comprehensive testing..."
          brew install --formula ./Formula/rxiv-maker.rb

          echo "üìä Running performance benchmarks..."

          # CLI startup time test
          time rxiv --version

          # Test multiple commands
          rxiv --help
          rxiv check-installation

          # Test in clean environment
          TEMP_DIR=$(mktemp -d)
          cd "$TEMP_DIR"

          if rxiv init perf-test --no-interactive 2>/dev/null; then
            cd perf-test
            rxiv validate --no-doi 2>/dev/null || echo "Validation requires full LaTeX setup"
          fi

          echo "‚úÖ Comprehensive testing completed"

  test-summary:
    name: Test Results Summary
    needs: [syntax-validation, formula-installation, comprehensive-testing]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# üç∫ Homebrew Formula Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope**: ${{ inputs.test-scope || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Syntax validation results
          if [ "${{ needs.syntax-validation.result }}" = "success" ]; then
            echo "‚úÖ **Syntax Validation**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Syntax Validation**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Installation results
          if [ "${{ needs.formula-installation.result }}" = "success" ]; then
            echo "‚úÖ **Formula Installation**: All platforms successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.formula-installation.result }}" = "failure" ]; then
            echo "‚ùå **Formula Installation**: Some platforms failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Formula Installation**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          # Comprehensive testing results
          if [ "${{ needs.comprehensive-testing.result }}" = "success" ]; then
            echo "‚úÖ **Comprehensive Testing**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.comprehensive-testing.result }}" = "failure" ]; then
            echo "‚ùå **Comprehensive Testing**: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚è≠Ô∏è **Comprehensive Testing**: Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üì¶ Installation Instructions" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo '# Option 1: Direct from repository' >> $GITHUB_STEP_SUMMARY
          echo 'brew install HenriquesLab/rxiv-maker/rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Option 2: Local formula installation' >> $GITHUB_STEP_SUMMARY
          echo 'brew install ./Formula/rxiv-maker.rb' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
