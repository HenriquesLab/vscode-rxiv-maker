name: Update Formula

on:
  repository_dispatch:
    types: [update-formula]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update to (e.g., v1.4.8)'
        required: false
        type: string
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false
      force_update:
        description: 'Force update even if version matches'
        required: false
        type: boolean
        default: false
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

env:
  HOMEBREW_NO_AUTO_UPDATE: 1
  HOMEBREW_NO_INSTALL_CLEANUP: 1
  HOMEBREW_NO_ANALYTICS: 1

jobs:
  check-for-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      update_needed: ${{ steps.check.outputs.update_needed }}
      current_version: ${{ steps.check.outputs.current_version }}
      target_version: ${{ steps.check.outputs.target_version }}
      has_changes: ${{ steps.check.outputs.has_changes }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for version updates
        id: check
        run: |
          echo "üîç Checking for version updates..."

          # Get current version from formula
          CURRENT_VERSION=$(grep -E '^\s*url.*rxiv_maker-' Formula/rxiv-maker.rb | sed 's/.*rxiv_maker-\([0-9.]*\)\.tar\.gz.*/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Determine target version
          if [ -n "${{ github.event.inputs.version }}" ]; then
            TARGET_VERSION="${{ github.event.inputs.version }}"
            echo "Target version (manual): $TARGET_VERSION"
          else
            # Get latest version from PyPI
            TARGET_VERSION=$(curl -s "https://pypi.org/pypi/rxiv-maker/json" | python3 -c "import sys, json; data = json.load(sys.stdin); print(data['info']['version'])" 2>/dev/null || echo "error")

            if [ "$TARGET_VERSION" = "error" ]; then
              echo "‚ùå Failed to fetch latest version from PyPI"
              exit 1
            fi

            echo "Target version (latest): $TARGET_VERSION"
          fi

          # Set outputs
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT

          # Check if update is needed
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "‚úÖ Update needed: $CURRENT_VERSION ‚Üí $TARGET_VERSION"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "‚ö†Ô∏è Force update enabled for version $TARGET_VERSION"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "‚ÑπÔ∏è No update needed (current: $CURRENT_VERSION)"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify target version exists on PyPI
        if: steps.check.outputs.update_needed == 'true'
        run: |
          TARGET_VERSION="${{ steps.check.outputs.target_version }}"
          echo "üîç Verifying target version $TARGET_VERSION exists on PyPI..."

          # Check if version exists on PyPI
          if curl -f "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" > /dev/null; then
            echo "‚úÖ Version $TARGET_VERSION exists on PyPI"
          else
            echo "‚ùå Version $TARGET_VERSION not found on PyPI"
            exit 1
          fi

  update-formula:
    name: Update Formula
    needs: check-for-updates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: needs.check-for-updates.outputs.update_needed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests

      - name: Set version and dry run mode
        id: config
        run: |
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            VERSION="${{ github.event.client_payload.version }}"
            DRY_RUN="false"
          else
            VERSION="${{ github.event.inputs.version }}"
            DRY_RUN="${{ github.event.inputs.dry_run }}"
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_num=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "dry_run=${DRY_RUN}" >> $GITHUB_OUTPUT

          if [ "$DRY_RUN" = "true" ]; then
            echo "üîç DRY RUN MODE - No changes will be made"
          fi

      - name: Cache downloaded scripts
        uses: actions/cache@v4
        with:
          path: |
            update-package-templates.py
            validate-package-templates.py
          key: scripts-${{ hashFiles('**/update-package-templates.py', '**/validate-package-templates.py') }}
          restore-keys: |
            scripts-

      - name: Download template update script
        run: |
          # Get the script from the main repository with error handling
          echo "üì• Downloading update scripts..."

          if [ ! -f "update-package-templates.py" ]; then
            if ! curl -sSfL -o update-package-templates.py https://raw.githubusercontent.com/HenriquesLab/rxiv-maker/main/scripts/update-package-templates.py; then
              echo "‚ùå Failed to download update-package-templates.py"
              exit 1
            fi
          fi

          if [ ! -f "validate-package-templates.py" ]; then
            if ! curl -sSfL -o validate-package-templates.py https://raw.githubusercontent.com/HenriquesLab/rxiv-maker/main/scripts/validate-package-templates.py; then
              echo "‚ùå Failed to download validate-package-templates.py"
              exit 1
            fi
          fi

          chmod +x update-package-templates.py validate-package-templates.py
          echo "‚úÖ Scripts downloaded successfully"

      - name: Download formula template
        run: |
          # Get the template from the main repository with error handling
          echo "üì• Downloading formula template..."

          if [ ! -f "Formula/rxiv-maker.rb.template" ]; then
            if ! curl -sSfL -o rxiv-maker.rb.template https://raw.githubusercontent.com/HenriquesLab/rxiv-maker/main/submodules/homebrew-rxiv-maker/Formula/rxiv-maker.rb.template; then
              echo "‚ùå Failed to download formula template"
              exit 1
            fi
            mv rxiv-maker.rb.template Formula/rxiv-maker.rb.template
          fi

          echo "‚úÖ Template downloaded successfully"

      - name: Validate template
        run: |
          echo "üîç Validating formula template..."
          python validate-package-templates.py validate-templates

      - name: Backup current formula
        if: steps.config.outputs.dry_run != 'true'
        run: |
          cp Formula/rxiv-maker.rb Formula/rxiv-maker.rb.backup
          echo "‚úÖ Backed up current formula"

      - name: Update formula from template
        id: update
        run: |
          VERSION="${{ steps.config.outputs.version }}"
          DRY_RUN_FLAG=""

          if [ "${{ steps.config.outputs.dry_run }}" = "true" ]; then
            DRY_RUN_FLAG="--dry-run"
          fi

          python update-package-templates.py homebrew "$VERSION" $DRY_RUN_FLAG

      - name: Validate updated formula
        if: steps.config.outputs.dry_run != 'true'
        run: |
          echo "üîç Validating updated formula..."

          # Check Ruby syntax
          if command -v ruby >/dev/null 2>&1; then
            ruby -c Formula/rxiv-maker.rb
            echo "‚úÖ Ruby syntax validation passed"
          else
            echo "‚ö†Ô∏è  Ruby not available for syntax validation"
          fi

          # Show key changes
          echo "üìã Formula changes:"
          if [ -f Formula/rxiv-maker.rb.backup ]; then
            echo "Version and URL updates:"
            diff Formula/rxiv-maker.rb.backup Formula/rxiv-maker.rb | grep -E '^[<>].*tar\.gz|^[<>].*sha256' || echo "No URL/hash changes detected"
          fi

          # Validate PyPI package exists
          VERSION="${{ steps.config.outputs.version_num }}"
          echo "üîç Verifying PyPI package for version $VERSION..."
          curl -f "https://pypi.org/pypi/rxiv-maker/$VERSION/json" > /dev/null
          echo "‚úÖ PyPI package verification passed"

      - name: Test formula (basic check)
        if: steps.config.outputs.dry_run != 'true'
        run: |
          echo "üß™ Testing formula structure..."

          # Check that all placeholders were replaced
          if grep -q "{{.*}}" Formula/rxiv-maker.rb; then
            echo "‚ùå Unreplaced placeholders found:"
            grep "{{.*}}" Formula/rxiv-maker.rb
            exit 1
          fi

          # Check that version is present
          VERSION="${{ steps.config.outputs.version }}"
          if ! grep -q "$VERSION" Formula/rxiv-maker.rb; then
            echo "‚ùå Version $VERSION not found in formula"
            exit 1
          fi

          echo "‚úÖ Formula structure validation passed"

      - name: Commit and push changes
        if: steps.config.outputs.dry_run != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Check if there are any changes
          if git diff --quiet Formula/rxiv-maker.rb; then
            echo "‚ÑπÔ∏è  No changes to commit"
            echo "status=no-changes" >> $GITHUB_OUTPUT
          else
            # Stage and commit changes
            git add Formula/rxiv-maker.rb
            git commit -m "Update rxiv-maker to ${{ steps.config.outputs.version }}

            ü§ñ Automated update using template system

            - Updated version to ${{ steps.config.outputs.version }}
            - Updated binary URLs and checksums
            - Validated formula syntax and structure"

            git push
            echo "‚úÖ Formula updated and pushed"
            echo "status=updated" >> $GITHUB_OUTPUT
          fi

      - name: Create detailed summary
        run: |
          VERSION="${{ steps.config.outputs.version }}"
          DRY_RUN="${{ steps.config.outputs.dry_run }}"

          echo "## üç∫ Homebrew Formula Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: $DRY_RUN" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$DRY_RUN" = "true" ]; then
            echo "### üîç Dry Run Results" >> $GITHUB_STEP_SUMMARY
            echo "This was a dry run - no changes were made to the repository." >> $GITHUB_STEP_SUMMARY
          else
            echo "### üìã Changes Made" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Formula updated from template" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Binary URLs updated to $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ SHA256 checksums calculated and updated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Ruby syntax validated" >> $GITHUB_STEP_SUMMARY
            echo "- ‚úÖ Formula structure validated" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo '# Option 1: Direct from repository' >> $GITHUB_STEP_SUMMARY
          echo 'brew install HenriquesLab/rxiv-maker/rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '# Option 2: Local formula installation' >> $GITHUB_STEP_SUMMARY
          echo 'brew install ./Formula/rxiv-maker.rb' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Handle errors and rollback
        if: failure() && steps.config.outputs.dry_run != 'true'
        run: |
          echo "‚ùå Formula update failed - attempting rollback"

          if [ -f Formula/rxiv-maker.rb.backup ]; then
            cp Formula/rxiv-maker.rb.backup Formula/rxiv-maker.rb
            echo "‚úÖ Rolled back to previous formula version"

            # Check if we need to commit the rollback
            if ! git diff --quiet Formula/rxiv-maker.rb; then
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add Formula/rxiv-maker.rb
              git commit -m "Rollback formula update due to validation failure"
              git push
              echo "‚úÖ Rollback committed and pushed"
            fi
          else
            echo "‚ö†Ô∏è  No backup found - manual intervention may be required"
          fi

          echo "## ‚ùå Formula Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "The formula update failed and has been rolled back if possible." >> $GITHUB_STEP_SUMMARY
          echo "Please check the logs for details and manual intervention may be required." >> $GITHUB_STEP_SUMMARY
