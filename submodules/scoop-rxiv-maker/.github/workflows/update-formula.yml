name: Update Formula

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      target-version:
        description: 'Target version to update to (leave empty for latest)'
        required: false
        default: ''
        type: string
      force-update:
        description: 'Force update even if version is same'
        required: false
        default: false
        type: boolean
      auto-merge:
        description: 'Auto-merge if tests pass (use with caution)'
        required: false
        default: false
        type: boolean
      skip-pr:
        description: 'Skip PR creation and commit directly'
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      target-version:
        description: 'Target version to update to'
        required: false
        default: ''
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  SCOOP_DEBUG: 1

jobs:
  check-updates:
    name: Check for Updates
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      update-needed: ${{ steps.check_version.outputs.update_needed }}
      current-version: ${{ steps.check_version.outputs.current_version }}
      target-version: ${{ steps.check_version.outputs.target_version }}
      has-changes: ${{ steps.check_version.outputs.has_changes }}
      pypi-data: ${{ steps.check_version.outputs.pypi_data }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Check for new version
        id: check_version
        timeout-minutes: 5
        run: |
          echo "🔍 Checking for version updates..."
          
          # Get current version from manifest
          CURRENT_VERSION=$(python3 -c "import json; print(json.load(open('bucket/rxiv-maker.json'))['version'])")
          echo "Current version: $CURRENT_VERSION"
          
          # Determine target version
          if [ -n "${{ inputs.target-version }}" ]; then
            TARGET_VERSION="${{ inputs.target-version }}"
            echo "Target version (manual): $TARGET_VERSION"
          else
            # Get latest version from PyPI
            PYPI_DATA=$(curl -s "https://pypi.org/pypi/rxiv-maker/json")
            TARGET_VERSION=$(echo "$PYPI_DATA" | python3 -c "import sys, json; data = json.load(sys.stdin); print(data.get('info', {}).get('version', 'error'))")
            
            if [ "$TARGET_VERSION" = "error" ]; then
              echo "❌ Failed to fetch latest version from PyPI"
              exit 1
            fi
            
            echo "Target version (latest): $TARGET_VERSION"
            
            # Store PyPI data for later use
            echo "$PYPI_DATA" > pypi-data.json
          fi
          
          # Set outputs
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          
          # Check if update is needed
          if [ "$CURRENT_VERSION" != "$TARGET_VERSION" ]; then
            echo "✅ Update needed: $CURRENT_VERSION → $TARGET_VERSION"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.force-update }}" = "true" ]; then
            echo "⚠️ Force update enabled for version $TARGET_VERSION"
            echo "update_needed=true" >> $GITHUB_OUTPUT
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No update needed (current: $CURRENT_VERSION)"
            echo "update_needed=false" >> $GITHUB_OUTPUT
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi
          
          # Store PyPI data as output (base64 encoded to handle special characters)
          if [ -f "pypi-data.json" ]; then
            PYPI_DATA_B64=$(base64 -w 0 pypi-data.json)
            echo "pypi_data=$PYPI_DATA_B64" >> $GITHUB_OUTPUT
          fi
          
      - name: Verify target version exists
        if: steps.check_version.outputs.update_needed == 'true'
        timeout-minutes: 3
        run: |
          TARGET_VERSION="${{ steps.check_version.outputs.target_version }}"
          echo "🔍 Verifying target version $TARGET_VERSION exists on PyPI..."
          
          # Check if version exists on PyPI with retry mechanism
          for i in {1..3}; do
            echo "Checking PyPI, attempt $i/3..."
            if curl -f "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" --max-time 15 --retry 2 --retry-delay 3 > /dev/null; then
              echo "✅ Version $TARGET_VERSION exists on PyPI"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ Version $TARGET_VERSION not found on PyPI after 3 attempts"
                exit 1
              else
                echo "⚠️ PyPI check attempt $i failed, retrying in 5 seconds..."
                sleep 5
              fi
            fi
          done
          
      - name: Get release information
        if: steps.check_version.outputs.update_needed == 'true'
        id: release_info
        run: |
          TARGET_VERSION="${{ steps.check_version.outputs.target_version }}"
          echo "📋 Getting release information for version $TARGET_VERSION..."
          
          # Get release info from PyPI
          RELEASE_INFO=$(curl -s "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json")
          
          # Extract release notes/description
          RELEASE_NOTES=$(echo "$RELEASE_INFO" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              description = data['info'].get('description', '')
              print(description[:500] + '...' if len(description) > 500 else description)
          except:
              print('No release notes available')
          ")
          
          # Extract upload date
          UPLOAD_DATE=$(echo "$RELEASE_INFO" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              files = data['releases']['$TARGET_VERSION']
              if files:
                  print(files[0]['upload_time'])
              else:
                  print('Unknown')
          except:
              print('Unknown')
          ")
          
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "upload_date=$UPLOAD_DATE" >> $GITHUB_OUTPUT

  update-manifest:
    name: Update Manifest
    needs: check-updates
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: needs.check-updates.outputs.update-needed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Update manifest file
        timeout-minutes: 10
        run: |
          TARGET_VERSION="${{ needs.check-updates.outputs.target-version }}"
          echo "🔄 Updating manifest to version $TARGET_VERSION..."
          
          # Get SHA256 hash from PyPI
          echo "Fetching SHA256 hash for version $TARGET_VERSION..."
          SHA256=$(curl -s "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              for file_info in data['releases']['$TARGET_VERSION']:
                  if file_info['packagetype'] == 'sdist':
                      print(file_info['digests']['sha256'])
                      break
              else:
                  print('error')
          except:
              print('error')
          ")
          
          if [ "$SHA256" = "error" ]; then
            echo "❌ Failed to fetch SHA256 hash"
            exit 1
          fi
          
          echo "New SHA256: $SHA256"
          
          # Backup original manifest
          cp bucket/rxiv-maker.json bucket/rxiv-maker.json.bak
          
          # Update manifest using Python
          python3 -c "
          import json
          import os
          
          target_version = '$TARGET_VERSION'
          sha256_hash = '$SHA256'
          
          with open('bucket/rxiv-maker.json', 'r') as f:
              manifest = json.load(f)
          
          # Update version
          manifest['version'] = target_version
          
          # Update URL
          manifest['url'] = f'https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-{target_version}.tar.gz'
          
          # Update hash
          manifest['hash'] = f'sha256:{sha256_hash}'
          
          # Update autoupdate if present
          if 'autoupdate' in manifest:
              manifest['autoupdate']['url'] = f'https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-\$version.tar.gz'
          
          # Write updated manifest
          with open('bucket/rxiv-maker.json', 'w') as f:
              json.dump(manifest, f, indent=4)
          
          print('✅ Manifest updated successfully')
          "
          
      - name: Validate updated manifest
        timeout-minutes: 5
        run: |
          echo "🔍 Validating updated manifest..."
          
          # Check JSON syntax
          python3 -m json.tool bucket/rxiv-maker.json > /dev/null
          echo "✅ JSON syntax is valid"
          
          # Verify download URL with retry mechanism
          TARGET_VERSION="${{ needs.check-updates.outputs.target-version }}"
          MANIFEST_URL=$(python3 -c "import json; print(json.load(open('bucket/rxiv-maker.json'))['url'])")
          echo "Testing download URL: $MANIFEST_URL"
          
          for i in {1..3}; do
            echo "Testing download URL, attempt $i/3..."
            if curl -I -f "$MANIFEST_URL" --max-time 30 --retry 2 --retry-delay 5; then
              echo "✅ Download URL is valid"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ Download URL verification failed after 3 attempts"
                exit 1
              else
                echo "⚠️ Download URL test attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          # Show differences
          echo "📋 Manifest changes:"
          diff -u bucket/rxiv-maker.json.bak bucket/rxiv-maker.json || true
          
      - name: Test updated manifest
        timeout-minutes: 10
        run: |
          echo "🧪 Testing updated manifest..."
          
          # Test autoupdate mechanism with retry
          echo "Testing autoupdate URL pattern..."
          TARGET_VERSION="${{ needs.check-updates.outputs.target-version }}"
          AUTOUPDATE_URL="https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-$TARGET_VERSION.tar.gz"
          
          for i in {1..3}; do
            echo "Testing autoupdate URL, attempt $i/3..."
            if curl -I -f "$AUTOUPDATE_URL" --max-time 30 --retry 2 --retry-delay 5; then
              echo "✅ Autoupdate URL pattern is valid"
              break
            else
              if [ $i -eq 3 ]; then
                echo "❌ Autoupdate URL verification failed after 3 attempts"
                exit 1
              else
                echo "⚠️ Autoupdate URL test attempt $i failed, retrying in 10 seconds..."
                sleep 10
              fi
            fi
          done
          
          # Validate against Scoop schema if available
          echo "ℹ️ Manifest structure validation completed"

  test-installation:
    name: Test Installation
    needs: [check-updates, update-manifest]
    runs-on: windows-latest
    timeout-minutes: 30
    if: needs.check-updates.outputs.update-needed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          
      - name: Apply manifest updates
        run: |
          # Re-apply the same updates (since we're in a clean checkout)
          $TARGET_VERSION = "${{ needs.check-updates.outputs.target-version }}"
          
          # Get SHA256 hash
          $response = Invoke-WebRequest -Uri "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" -UseBasicParsing
          $data = $response.Content | ConvertFrom-Json
          $sha256 = ""
          
          foreach ($file in $data.releases.($TARGET_VERSION)) {
              if ($file.packagetype -eq "sdist") {
                  $sha256 = $file.digests.sha256
                  break
              }
          }
          
          # Update manifest
          $manifest = Get-Content "bucket/rxiv-maker.json" | ConvertFrom-Json
          $manifest.version = $TARGET_VERSION
          $manifest.url = "https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-$TARGET_VERSION.tar.gz"
          $manifest.hash = "sha256:$sha256"
          
          $manifest | ConvertTo-Json -Depth 10 | Set-Content "bucket/rxiv-maker.json"
          
          Write-Host "✅ Manifest updated for testing"
        shell: powershell
        
      - name: Install Scoop
        run: |
          Write-Host "🛠️ Installing Scoop..."
          Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
          irm get.scoop.sh | iex
          
          # Verify installation
          scoop --version
          Write-Host "✅ Scoop installed"
        shell: powershell
        
      - name: Test updated manifest
        run: |
          Write-Host "🧪 Testing updated manifest..."
          
          # Reload PATH
          $env:PATH = [System.Environment]::GetEnvironmentVariable("PATH","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("PATH","User")
          
          # Install from updated manifest
          scoop install "${{ github.workspace }}/bucket/rxiv-maker.json"
          
          # Verify installation
          rxiv --version
          rxiv --help
          
          Write-Host "✅ Installation test passed"
        shell: powershell

  create-pull-request:
    name: Create Pull Request
    needs: [check-updates, update-manifest, test-installation]
    runs-on: ubuntu-latest
    if: needs.check-updates.outputs.update-needed == 'true' && inputs.skip-pr != true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Apply manifest updates
        run: |
          TARGET_VERSION="${{ needs.check-updates.outputs.target-version }}"
          
          # Get SHA256 hash
          SHA256=$(curl -s "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              for file_info in data['releases']['$TARGET_VERSION']:
                  if file_info['packagetype'] == 'sdist':
                      print(file_info['digests']['sha256'])
                      break
          except:
              print('error')
          ")
          
          # Update manifest
          python3 -c "
          import json
          
          with open('bucket/rxiv-maker.json', 'r') as f:
              manifest = json.load(f)
          
          manifest['version'] = '$TARGET_VERSION'
          manifest['url'] = f'https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-$TARGET_VERSION.tar.gz'
          manifest['hash'] = f'sha256:$SHA256'
          
          with open('bucket/rxiv-maker.json', 'w') as f:
              json.dump(manifest, f, indent=4)
          "
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Update rxiv-maker to version ${{ needs.check-updates.outputs.target-version }}"
          title: "Auto-update: rxiv-maker ${{ needs.check-updates.outputs.current-version }} → ${{ needs.check-updates.outputs.target-version }}"
          body: |
            ## 🔄 Auto-update from PyPI
            
            **Previous version:** `${{ needs.check-updates.outputs.current-version }}`
            **New version:** `${{ needs.check-updates.outputs.target-version }}`
            
            ### ✅ Automated Changes
            - [x] Updated version number in manifest
            - [x] Updated download URL
            - [x] Updated SHA256 checksum
            - [x] JSON syntax validation passed
            - [x] Download URL verified
            - [x] Installation tested on Windows
            
            ### 🔍 Manual Review Recommended
            - [ ] Review release notes for breaking changes
            - [ ] Test on different Windows versions
            - [ ] Verify advanced functionality
            - [ ] Check autoupdate mechanism
            
            ### 📋 Verification Completed
            - [x] JSON syntax validated
            - [x] Download URL verified with HTTP request
            - [x] Installation tested with Scoop
            - [x] Basic CLI functionality verified
            
            ### 🔗 References
            - **PyPI Release**: https://pypi.org/project/rxiv-maker/${{ needs.check-updates.outputs.target-version }}/
            - **GitHub Release**: https://github.com/henriqueslab/rxiv-maker/releases/tag/v${{ needs.check-updates.outputs.target-version }}
            - **Scoop Documentation**: https://scoop.sh/
            
            ### 📊 Impact Assessment
            - **Breaking Changes**: Review required
            - **Windows Compatibility**: Tested
            - **Autoupdate**: Verified
            
            ### 🧪 Testing Results
            - **Manifest Validation**: ✅ Passed
            - **Installation Test**: ✅ Passed on Windows
            - **Basic Functionality**: ✅ Passed
            
            ---
            
            🤖 This PR was automatically created by the update-formula workflow.
            🔍 Manual review recommended before merging.
            
            **Auto-merge**: $(if [ "${{ inputs.auto-merge }}" = "true" ]; then echo "Enabled"; else echo "Disabled"; fi)
          branch: auto-update-${{ needs.check-updates.outputs.target-version }}
          delete-branch: true
          labels: |
            auto-update
            dependencies
            $(if [ "${{ inputs.auto-merge }}" = "true" ]; then echo "auto-merge"; else echo "review-required"; fi)
          assignees: |
            ${{ github.repository_owner }}

  auto-merge:
    name: Auto-merge PR
    needs: [check-updates, create-pull-request]
    runs-on: ubuntu-latest
    if: needs.check-updates.outputs.update-needed == 'true' && inputs.auto-merge == true && inputs.skip-pr != true
    
    steps:
      - name: Wait for PR checks
        run: |
          echo "⏳ Waiting 60 seconds for PR checks to complete..."
          sleep 60
          
      - name: Auto-merge PR
        uses: pascalgn/merge-action@v0.15.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash
          merge_labels: "auto-update,auto-merge"

  direct-commit:
    name: Direct Commit
    needs: [check-updates, update-manifest, test-installation]
    runs-on: ubuntu-latest
    if: needs.check-updates.outputs.update-needed == 'true' && inputs.skip-pr == true
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Apply manifest updates
        run: |
          TARGET_VERSION="${{ needs.check-updates.outputs.target-version }}"
          
          # Get SHA256 hash
          SHA256=$(curl -s "https://pypi.org/pypi/rxiv-maker/$TARGET_VERSION/json" | python3 -c "
          import sys, json
          try:
              data = json.load(sys.stdin)
              for file_info in data['releases']['$TARGET_VERSION']:
                  if file_info['packagetype'] == 'sdist':
                      print(file_info['digests']['sha256'])
                      break
          except:
              print('error')
          ")
          
          # Update manifest
          python3 -c "
          import json
          
          with open('bucket/rxiv-maker.json', 'r') as f:
              manifest = json.load(f)
          
          manifest['version'] = '$TARGET_VERSION'
          manifest['url'] = f'https://files.pythonhosted.org/packages/source/r/rxiv-maker/rxiv_maker-$TARGET_VERSION.tar.gz'
          manifest['hash'] = f'sha256:$SHA256'
          
          with open('bucket/rxiv-maker.json', 'w') as f:
              json.dump(manifest, f, indent=4)
          "
          
      - name: Commit changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add bucket/rxiv-maker.json
          git commit -m "Update rxiv-maker to version ${{ needs.check-updates.outputs.target-version }}

          - Updated version from ${{ needs.check-updates.outputs.current-version }} to ${{ needs.check-updates.outputs.target-version }}
          - Updated download URL and SHA256 checksum
          - JSON syntax validated
          - Installation tested on Windows
          
          Auto-updated by update-formula workflow"
          
          git push origin main

  notify-completion:
    name: Notify Completion
    needs: [check-updates, update-manifest, test-installation, create-pull-request, auto-merge, direct-commit]
    runs-on: ubuntu-latest
    if: always() && needs.check-updates.outputs.update-needed == 'true'
    
    steps:
      - name: Create update summary
        run: |
          echo "# Scoop Formula Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version**: ${{ needs.check-updates.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version**: ${{ needs.check-updates.outputs.target-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Auto-merge**: ${{ inputs.auto-merge }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Update status
          if [ "${{ needs.update-manifest.result }}" = "success" ]; then
            echo "✅ **Manifest Update**: Successfully updated and validated" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Manifest Update**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Installation test
          if [ "${{ needs.test-installation.result }}" = "success" ]; then
            echo "✅ **Installation Test**: Windows installation successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Installation Test**: Windows installation failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # PR/Commit status
          if [ "${{ inputs.skip-pr }}" = "true" ]; then
            if [ "${{ needs.direct-commit.result }}" = "success" ]; then
              echo "✅ **Direct Commit**: Changes committed to main branch" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **Direct Commit**: Failed to commit changes" >> $GITHUB_STEP_SUMMARY
            fi
          else
            if [ "${{ needs.create-pull-request.result }}" = "success" ]; then
              echo "✅ **Pull Request**: Created for review" >> $GITHUB_STEP_SUMMARY
              
              # Auto-merge status
              if [ "${{ inputs.auto-merge }}" = "true" ]; then
                if [ "${{ needs.auto-merge.result }}" = "success" ]; then
                  echo "✅ **Auto-merge**: PR automatically merged" >> $GITHUB_STEP_SUMMARY
                else
                  echo "❌ **Auto-merge**: Failed to merge PR" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            else
              echo "❌ **Pull Request**: Failed to create PR" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps**: $(if [ "${{ inputs.skip-pr }}" = "true" ]; then echo "Changes committed directly"; elif [ "${{ inputs.auto-merge }}" = "true" ]; then echo "Auto-merge attempted"; else echo "Review and merge the pull request"; fi)" >> $GITHUB_STEP_SUMMARY

  no-update-needed:
    name: No Update Required
    needs: check-updates
    runs-on: ubuntu-latest
    if: needs.check-updates.outputs.update-needed == 'false'
    
    steps:
      - name: Log no update needed
        run: |
          echo "# No Update Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Version**: ${{ needs.check-updates.outputs.current-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Latest Version**: ${{ needs.check-updates.outputs.target-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: Manifest is up to date" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ No action required. The manifest is already at the latest version." >> $GITHUB_STEP_SUMMARY