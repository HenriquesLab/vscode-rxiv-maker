name: Docker Images

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'src/docker/**'
      - 'src/rxiv_maker/__version__.py'  # Trigger on version changes
      - '.github/workflows/build-docker-base.yml'
      - 'pyproject.toml'  # Trigger on dependency changes
      - 'uv.lock'  # Trigger on lockfile changes
  pull_request:
    branches: [ main ]
    paths:
      - 'src/docker/**'
      - '.github/workflows/build-docker-base.yml'
      - 'pyproject.toml'
      - 'uv.lock'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag for the built image'
        required: false
        default: 'latest'
      rxiv_version:
        description: 'rxiv-maker version to tag the image with (e.g., 1.4.8)'
        required: false
        default: ''
      platforms:
        description: 'Platforms to build for'
        required: false
        default: 'linux/amd64,linux/arm64'
      force_build:
        description: 'Force rebuild even if no changes detected'
        required: false
        default: false
        type: boolean
  repository_dispatch:
    types: [build-docker-image]

env:
  REGISTRY: docker.io
  BASE_IMAGE_NAME: henriqueslab/rxiv-maker-base
  PYTHONIOENCODING: utf-8

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-base:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Add timeout for better resource management

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
        driver-opts: |
          network=host
          image=moby/buildkit:buildx-stable-1

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PUSH }}

    - name: Determine version and tags
      id: version
      run: |
        # Determine version from multiple sources
        if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          # Repository dispatch from version sync
          VERSION="${{ github.event.client_payload.version }}"
          echo "Using version from repository_dispatch: $VERSION"
        elif [ -n "${{ github.event.inputs.rxiv_version }}" ]; then
          # Manual workflow dispatch with version
          VERSION="${{ github.event.inputs.rxiv_version }}"
          echo "Using version from manual input: $VERSION"
        elif [ "${{ github.event.inputs.tag }}" != "latest" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
          # Manual workflow dispatch with custom tag
          VERSION="${{ github.event.inputs.tag }}"
          echo "Using custom tag as version: $VERSION"
        else
          # Extract version from Python package for development builds
          VERSION=$(python3 -c "
          import sys
          sys.path.insert(0, 'src')
          from rxiv_maker.__version__ import __version__
          print(__version__)
          " 2>/dev/null || echo "latest")
          echo "Using version from package: $VERSION"
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Final version: $VERSION"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event.inputs.tag != '' && github.event.inputs.tag != 'latest' }}
          type=raw,value=v${{ steps.version.outputs.version }},enable=${{ steps.version.outputs.version != 'latest' }}
        labels: |
          org.opencontainers.image.title=rxiv-maker-base
          org.opencontainers.image.description=Ubuntu-based image with LaTeX, Python, R, and mermaid.ink API integration
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          rxiv-maker.version=${{ steps.version.outputs.version }}
          rxiv-maker.variant=mermaid-api

    - name: Build and push base image
      uses: docker/build-push-action@v6
      with:
        context: ./src/docker/images/base
        platforms: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: |
          type=gha
          type=registry,ref=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:buildcache
        cache-to: |
          type=gha,mode=max
          type=registry,ref=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}:buildcache,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          BUILDKIT_MULTI_PLATFORM=1
        provenance: false  # Disable provenance to prevent cache issues
        sbom: false       # Disable SBOM to prevent cache issues
        outputs: type=image,name=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }},push-by-digest=false,name-canonical=true,push=${{ github.event_name != 'pull_request' }}


    - name: Update repository description
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
      run: |
        # Update Docker Hub repository description with retry logic
        for i in {1..3}; do
          echo "Updating Docker Hub description, attempt $i/3..."
          if curl -X PATCH \
            -H "Authorization: Bearer ${{ secrets.DOCKER_PUSH }}" \
            -H "Content-Type: application/json" \
            --max-time 30 \
            --retry 2 \
            --retry-delay 5 \
            -d '{
              "full_description": "# Rxiv-Maker Base Docker Image\n\nUbuntu-based image with LaTeX, Python, R, and mermaid.ink API integration for scientific document generation. Optimized for lightweight, efficient PDF generation.\n\n## Quick Start\n```bash\ndocker run -it --rm -v $(pwd):/workspace henriqueslab/rxiv-maker-base:latest\n```\n\n## Features\n- **Complete LaTeX distribution** with all packages\n- **Python 3.11** with scientific libraries\n- **R with graphics support** including essential packages\n- **Mermaid diagram support** via mermaid.ink API\n- **Extended font collection** for better rendering quality\n- **Multi-platform support** (AMD64/ARM64)\n- **No browser dependencies** for optimal performance\n- **Lightweight design** focused on essential tools\n\n## Usage with rxiv-maker\n```bash\n# Use Docker engine mode\nRXIV_ENGINE=docker rxiv pdf\n```\n\n## Documentation\nSee [GitHub repository](https://github.com/${{ github.repository }}) for full documentation and guides."
            }' \
            "https://hub.docker.com/v2/repositories/${{ env.BASE_IMAGE_NAME }}/"; then
            echo "✅ Docker Hub description updated successfully"
            break
          else
            if [ $i -eq 3 ]; then
              echo "⚠️ Failed to update Docker Hub description after 3 attempts"
            else
              echo "⚠️ Attempt $i failed, retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

    - name: Summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.BASE_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags**: ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ github.event.inputs.platforms || 'linux/amd64,linux/arm64' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Successfully built and pushed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Multi-architecture Docker image built and uploaded to Docker Hub." >> $GITHUB_STEP_SUMMARY

        # Output information for debugging
        echo "Built image: ${{ env.BASE_IMAGE_NAME }}:v${{ steps.version.outputs.version }}"
