name: Build and Release PDF

on:
  push:
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      manuscript_path:
        description: 'Path to manuscript directory (e.g., MANUSCRIPT, EXAMPLE_MANUSCRIPT, or custom path)'
        required: false
        default: 'MANUSCRIPT'
        type: string
  workflow_call:
    inputs:
      manuscript_path:
        description: 'Path to manuscript directory'
        required: false
        default: 'MANUSCRIPT'
        type: string
    outputs:
      pdf-path:
        description: 'Path to generated PDF'
        value: ${{ jobs.build-pdf.outputs.pdf-path }}
      artifact-name:
        description: 'Name of the PDF artifact'
        value: ${{ jobs.build-pdf.outputs.artifact-name }}
      success:
        description: 'Whether the build was successful'
        value: ${{ jobs.build-pdf.outputs.success }}

env:
  PYTHONIOENCODING: utf-8

jobs:
  # First job: Determine which manuscript directory to use and get version
  prepare:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      manuscript_path: ${{ steps.set-path.outputs.manuscript_path }}
      rxiv_version: ${{ steps.get-version.outputs.version }}
      docker_image: ${{ steps.get-version.outputs.docker_image }}
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Mark workspace as safe
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Update submodules
        run: git submodule update --init --recursive

      - name: Install GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y gh

      - name: Get rxiv-maker version and determine Docker image
        id: get-version
        run: |
          # Extract version from Python package
          VERSION=$(python3 -c "
          import sys
          sys.path.insert(0, 'src')
          from rxiv_maker.__version__ import __version__
          print(__version__)
          ")

          echo "Detected rxiv-maker version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Check if version-specific Docker image exists
          VERSIONED_IMAGE="henriqueslab/rxiv-maker-base:v$VERSION"
          FALLBACK_IMAGE="henriqueslab/rxiv-maker-base:latest"

          echo "Checking availability of versioned image: $VERSIONED_IMAGE"

          # Check for version-specific image availability with timeout and retry
          echo "🔍 Checking Docker image availability..."

          # Use Docker Hub API with proper error handling and retry logic
          check_image_exists() {
            local image_path="$1"
            local timeout=15
            local max_attempts=3

            for attempt in $(seq 1 $max_attempts); do
              echo "  Attempt $attempt/$max_attempts for $image_path"
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time "$timeout" \
                "https://hub.docker.com/v2/repositories/$image_path/" 2>/dev/null || echo "000")

              if [ "$HTTP_CODE" = "200" ]; then
                echo "  ✅ Image found (HTTP $HTTP_CODE)"
                return 0
              elif [ "$HTTP_CODE" = "404" ]; then
                echo "  ❌ Image not found (HTTP $HTTP_CODE)"
                return 1
              else
                echo "  ⚠️ API error (HTTP $HTTP_CODE), retrying in 2 seconds..."
                [ $attempt -lt $max_attempts ] && sleep 2
              fi
            done
            echo "  ❌ Failed after $max_attempts attempts"
            return 1
          }

          # Always use latest image for stability, with version-specific as backup
          echo "🔍 Checking latest image availability first for stability..."
          if check_image_exists "henriqueslab/rxiv-maker-base/tags/latest"; then
            echo "✅ Using stable latest image: $FALLBACK_IMAGE"
            DOCKER_IMAGE="$FALLBACK_IMAGE"
          elif check_image_exists "henriqueslab/rxiv-maker-base/tags/v$VERSION"; then
            echo "✅ Using version-specific image: $VERSIONED_IMAGE"
            DOCKER_IMAGE="$VERSIONED_IMAGE"
          else
            echo "⚠️ No images found via API, defaulting to latest (may work due to Docker Hub caching)"
            echo "📋 Will attempt to use fallback anyway: $FALLBACK_IMAGE"
            DOCKER_IMAGE="$FALLBACK_IMAGE"
          fi

          echo "docker_image=$DOCKER_IMAGE" >> $GITHUB_OUTPUT
          echo "Final Docker image: $DOCKER_IMAGE"

      - name: Set manuscript path
        id: set-path
        run: |
          # Load environment variables from .env file if it exists
          if [ -f ".env" ]; then
            set -a
            source .env
            set +a
          fi

          # Determine manuscript path based on trigger type
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger: use user-provided path or fallback to default
            INPUT_PATH="${{ github.event.inputs.manuscript_path }}"
            MANUSCRIPT_PATH="${INPUT_PATH:-MANUSCRIPT}"
          else
            # Tag trigger: use .env file value or fallback to EXAMPLE_MANUSCRIPT
            MANUSCRIPT_PATH="${MANUSCRIPT_PATH:-EXAMPLE_MANUSCRIPT}"
          fi

          echo "Using manuscript path: $MANUSCRIPT_PATH"
          echo "manuscript_path=$MANUSCRIPT_PATH" >> $GITHUB_OUTPUT

  # Second job: Build the PDF document
  # Using pre-compiled Docker image for 5x faster builds (~2 min vs ~10+ min)
  # Container includes LaTeX, Python scientific stack, R packages, Node.js, and system dependencies
  build-pdf:
    needs: prepare
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container:
      image: ${{ needs.prepare.outputs.docker_image }}  # Version-specific pre-compiled image
      options: --user root --privileged
    outputs:
      pdf-path: ${{ steps.build-result.outputs.pdf-path }}
      artifact-name: ${{ steps.build-result.outputs.artifact-name }}
      success: ${{ steps.build-result.outputs.success }}

    steps:
    - name: Verify Docker image availability
      run: |
        echo "=================================================="
        echo "🐳 Docker Image Verification"
        echo "=================================================="
        echo "Expected image: ${{ needs.prepare.outputs.docker_image }}"
        echo "rxiv-maker version: ${{ needs.prepare.outputs.rxiv_version }}"
        echo "Current container image: $(hostname || echo 'unknown')"

        # Verify we're running in the expected container
        if command -v pdflatex >/dev/null 2>&1; then
          echo "✅ LaTeX installation detected"
          pdflatex --version | head -1
        else
          echo "❌ LaTeX not found in container"
          echo "This suggests Docker image version mismatch"
        fi

        if command -v python3 >/dev/null 2>&1; then
          echo "✅ Python installation detected"
          python3 --version
        else
          echo "❌ Python not found in container"
        fi

        # Check for mermaid.ink API configuration
        if [ -n "$(python3 -c 'import os; print(os.environ.get("MERMAID_INK_API", ""))' 2>/dev/null)" ]; then
          echo "✅ Mermaid.ink API configured for diagram generation"
        else
          echo "ℹ️ Using default mermaid diagram rendering"
        fi

    - name: Test environment functionality
      run: |
        echo "🔍 Testing environment capabilities..."

        # Test Python environment
        echo "🐍 Testing Python environment..."
        python3 --version
        python3 -c "import matplotlib; print('✅ Matplotlib available:', matplotlib.__version__)"
        python3 -c "import pandas; print('✅ Pandas available:', pandas.__version__)"
        python3 -c "import numpy; print('✅ NumPy available:', numpy.__version__)"

        # Test enhanced font availability
        echo "🔤 Testing enhanced font collection..."
        if fc-list | grep -i "liberation\|dejavu\|roboto\|noto" | head -3; then
          echo "✅ Enhanced fonts available"
        else
          echo "⚠️ Limited font collection detected"
        fi

        # Test R environment if available
        if command -v R >/dev/null 2>&1; then
          echo "📊 Testing R environment..."
          R --version | head -1
          echo "✅ R environment available"
        else
          echo "ℹ️ R not available in this image"
        fi

        # Verify LaTeX is available
        echo "📄 Verifying LaTeX installation..."
        if command -v pdflatex >/dev/null 2>&1; then
          echo "✅ LaTeX (pdflatex) available"
        else
          echo "❌ LaTeX not found!"
        fi

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Verify checkout
      run: |
        echo "📁 Verifying repository checkout..."
        echo "Working directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Git status:"
        git status --porcelain || echo "Not a git repository"
        echo "Submodules:"
        git submodule status || echo "No submodules"

    - name: Set manuscript path from prepare job
      run: |
        echo "MANUSCRIPT_PATH=${{ needs.prepare.outputs.manuscript_path }}" >> $GITHUB_ENV
        echo "Using manuscript path: ${{ needs.prepare.outputs.manuscript_path }}"
        echo "Using rxiv-maker version: ${{ needs.prepare.outputs.rxiv_version }}"

    - name: Configure Git
      run: |
        git config --global --add safe.directory /__w/rxiv-maker/rxiv-maker
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"

        # Ensure submodules are properly initialized
        git submodule update --init --recursive || echo "Submodule initialization failed, continuing..."
        git submodule status

    - name: Install GitHub CLI inside container
      run: |
        apt-get update
        apt-get install -y gh

    # Cache Python dependencies and virtual environment
    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
          .venv
        key: ${{ runner.os }}-python-pdf-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-python-pdf-
          ${{ runner.os }}-python-

    # Install Python dependencies only (system dependencies pre-installed in Docker image)
    # This step is much faster than installing everything from scratch (~30s vs ~8+ min)
    - name: Install Python dependencies
      run: |
        echo "Installing Python dependencies..."
        echo "NOTE: LaTeX, R packages, Node.js, and system dependencies are pre-installed in container"

        # Ensure cache directories have proper permissions
        mkdir -p ~/.cache ~/.R/library
        chown -R root:root ~/.cache ~/.R/library || true

        # Install Python dependencies using uv (system dependencies already in Docker image)
        # This is the key performance optimization - no lengthy apt installs or LaTeX setup
        python3 -m pip install uv
        uv sync
        uv pip install -e .

        # Set up a writable R library directory (core R packages already in Docker image)
        echo 'R_LIBS_USER="~/.R/library"' >> ~/.Renviron

    # Cache R library directory
    - name: Cache R packages
      uses: actions/cache@v4
      with:
        path: ~/.R/library
        key: ${{ runner.os }}-r-${{ hashFiles('**/DESCRIPTION') }}
        restore-keys: |
          ${{ runner.os }}-r-

    # Cache LaTeX build outputs from previous runs
    - name: Cache LaTeX outputs
      uses: actions/cache@v4
      with:
        path: |
          output/*.aux
          output/*.bbl
          output/*.blg
          output/*.toc
          output/*.out
        key: ${{ runner.os }}-latex-${{ hashFiles('${{ needs.prepare.outputs.manuscript_path }}/**/*.md', '${{ needs.prepare.outputs.manuscript_path }}/**/*.bib', '${{ needs.prepare.outputs.manuscript_path }}/**/*.yml') }}
        restore-keys: |
          ${{ runner.os }}-latex-

    # Cache processed figures
    - name: Cache processed figures
      uses: actions/cache@v4
      with:
        path: |
          ${{ needs.prepare.outputs.manuscript_path }}/FIGURES/*/
          cache/figures
        key: ${{ runner.os }}-figures-${{ hashFiles('${{ needs.prepare.outputs.manuscript_path }}/FIGURES/**/*') }}
        restore-keys: |
          ${{ runner.os }}-figures-

    - name: Generate PDF
      timeout-minutes: 15
      shell: bash
      env:
        R_LIBS_USER: ~/.R/library
        MANUSCRIPT_PATH: ${{ needs.prepare.outputs.manuscript_path }}
      run: |
        echo "✅ Running PDF generation with detailed logging"
        echo "=================================================="
        echo "📋 Build Configuration:"
        echo "  - Manuscript Path: $MANUSCRIPT_PATH"
        echo "  - Python Version: $(python3 --version)"
        echo "  - LaTeX Version: $(pdflatex --version | head -1)"
        echo "  - Current Directory: $(pwd)"
        echo "  - Available Memory: $(free -h | grep '^Mem:' | awk '{print $2}' | tr -d '\n') total, $(free -h | grep '^Mem:' | awk '{print $7}' | tr -d '\n') available"
        echo "  - Available Space: $(df -h . | tail -1 | awk '{print $4}') free"
        echo "=================================================="

        # Set up environment with verbose logging
        export TEXMFVAR=/tmp/texmf-var
        export FORCE_FIGURES=true
        echo "🔧 Environment variables set:"
        echo "  - MANUSCRIPT_PATH: $MANUSCRIPT_PATH"
        echo "  - TEXMFVAR: $TEXMFVAR"
        echo "  - FORCE_FIGURES: $FORCE_FIGURES"
        echo "  - R_LIBS_USER: $R_LIBS_USER"

        # Create necessary directories
        echo "📁 Creating necessary directories..."
        mkdir -p /tmp/texmf-var output ~/.cache ~/.R/library
        echo "  - Created /tmp/texmf-var"
        echo "  - Created output"
        echo "  - Ensured cache directories exist"

        # Check manuscript directory exists
        echo "📂 Checking manuscript directory..."
        if [ -d "$MANUSCRIPT_PATH" ]; then
          echo "  ✅ Manuscript directory exists: $MANUSCRIPT_PATH"
          echo "  📋 Contents:"
          ls -la "$MANUSCRIPT_PATH" | sed 's/^/    /'
        else
          echo "  ❌ ERROR: Manuscript directory not found: $MANUSCRIPT_PATH"
          echo "  📋 Available directories:"
          ls -la . | grep '^d' | sed 's/^/    /'
          exit 1
        fi

        # Check Python dependencies
        echo "🐍 Checking Python dependencies..."
        python3 -c "import sys; print(f'  - Python executable: {sys.executable}')"
        python3 -c "import numpy; print(f'  - NumPy version: {numpy.__version__}')" || echo "  ❌ NumPy not available"
        python3 -c "import matplotlib; print(f'  - Matplotlib version: {matplotlib.__version__}')" || echo "  ❌ Matplotlib not available"
        python3 -c "import yaml; print(f'  - PyYAML available')" || echo "  ❌ PyYAML not available"

        # Run the build with step-by-step logging
        echo "🧹 Step 1: Cleaning figures..."
        uv run rxiv clean "$MANUSCRIPT_PATH" --figures-only 2>&1 | sed 's/^/  /'
        echo "  ✅ Figures cleaned"

        echo "📄 Step 2: Generating PDF..."
        echo "  Command: uv run rxiv pdf \"$MANUSCRIPT_PATH\" --output-dir output --force-figures"
        echo "  Working directory: $(pwd)"
        echo "  Start time: $(date)"

        # Run rxiv pdf with detailed output
        set -o pipefail
        uv run rxiv pdf "$MANUSCRIPT_PATH" --output-dir output --force-figures 2>&1 | tee /tmp/rxiv_pdf_output.log | sed 's/^/  /'
        RXIV_EXIT_CODE=$?

        echo "  End time: $(date)"
        echo "  Exit code: $RXIV_EXIT_CODE"

        if [ $RXIV_EXIT_CODE -ne 0 ]; then
          echo "  ❌ rxiv pdf failed with exit code $RXIV_EXIT_CODE"
          echo "  📋 Last 50 lines of output:"
          tail -50 /tmp/rxiv_pdf_output.log | sed 's/^/    /'
          exit $RXIV_EXIT_CODE
        else
          echo "  ✅ rxiv pdf completed successfully"
        fi

    - name: Check PDF generation
      env:
        MANUSCRIPT_PATH: ${{ needs.prepare.outputs.manuscript_path }}
      run: |
        echo "=================================================="
        echo "📋 Checking PDF generation results..."
        echo "=================================================="

        echo "🔍 Using manuscript path: $MANUSCRIPT_PATH"
        echo "🔍 Expected PDF location: output/${MANUSCRIPT_PATH}.pdf"

        # Check output directory
        echo "📁 Output directory contents:"
        if [ -d "output" ]; then
          ls -la output/ | sed 's/^/  /'
        else
          echo "  ❌ ERROR: Output directory not found"
          echo "  📋 Current directory contents:"
          ls -la . | sed 's/^/    /'
        fi

        # Enhanced PDF detection with multiple naming patterns
        MANUSCRIPT_BASENAME=$(basename "$MANUSCRIPT_PATH")

        # Try multiple possible PDF names in order of preference (space-separated)
        PDF_CANDIDATES="output/${MANUSCRIPT_BASENAME}.pdf output/manuscript.pdf output/MANUSCRIPT.pdf output/${MANUSCRIPT_PATH}.pdf ${MANUSCRIPT_PATH}/output/${MANUSCRIPT_BASENAME}.pdf ${MANUSCRIPT_PATH}/${MANUSCRIPT_BASENAME}.pdf ${MANUSCRIPT_PATH}.pdf output/preprint.pdf"

        echo "🔍 Looking for generated PDF files..."
        echo "  📂 Manuscript path: $MANUSCRIPT_PATH"
        echo "  📂 Manuscript basename: $MANUSCRIPT_BASENAME"

        PDF_PATH=""
        for candidate in $PDF_CANDIDATES; do
          echo "  🔍 Checking: $candidate"
          if [ -f "$candidate" ]; then
            PDF_PATH="$candidate"
            echo "  ✅ PDF found at: $PDF_PATH"
            break
          fi
        done

        if [ -n "$PDF_PATH" ]; then
          echo "  📊 PDF Details:"
          ls -la "$PDF_PATH" | sed 's/^/    /'
          file "$PDF_PATH" | sed 's/^/    /'
          echo "  📏 PDF size: $(du -h "$PDF_PATH" | cut -f1)"

          # Verify PDF is not corrupted
          if file "$PDF_PATH" | grep -q "PDF document"; then
            echo "  ✅ PDF file format verified"
          else
            echo "  ⚠️ PDF file may be corrupted"
          fi
        else
          echo "  ❌ ERROR: PDF not found at any expected locations"
          echo "  🔍 Searched locations:"
          for candidate in $PDF_CANDIDATES; do
            echo "    - $candidate"
          done

          echo "  🔍 Searching for any PDF files in workspace..."
          find . -name "*.pdf" -type f 2>/dev/null | sed 's/^/    /' || echo "    No PDF files found anywhere"

          echo "  📋 Contents of output directory:"
          if [ -d "output" ]; then
            ls -la output/ | sed 's/^/    /'
          else
            echo "    Output directory does not exist"
          fi

          echo "  📋 Contents of manuscript directory:"
          if [ -d "$MANUSCRIPT_PATH" ]; then
            ls -la "$MANUSCRIPT_PATH" | sed 's/^/    /'
          else
            echo "    Manuscript directory does not exist: $MANUSCRIPT_PATH"
          fi

          echo "  📋 LaTeX log files analysis:"
          find . -name "*.log" -exec echo "    === {} ===" \; -exec tail -30 {} \; 2>/dev/null || echo "    No log files found"

          echo "  📋 Rxiv PDF output log:"
          if [ -f "/tmp/rxiv_pdf_output.log" ]; then
            echo "    Last 50 lines of rxiv PDF output:"
            tail -50 /tmp/rxiv_pdf_output.log | sed 's/^/      /'
          else
            echo "    No rxiv PDF output log found"
          fi

          exit 1
        fi

    # Always upload debug files for troubleshooting (even on success)
    - name: Upload debug artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: debug-files
        path: |
          /tmp/rxiv_pdf_output.log
          output/*.log
          output/*.aux
          output/*.bbl
          output/*.blg
          output/*.out
          output/*.toc
          output/*.fls
          output/*.fdb_latexmk
          .cache/
        retention-days: 30

    # Collect system information on failure
    - name: Collect system debug information
      if: failure()
      run: |
        echo "=================================================="
        echo "🔍 System Debug Information (Build Failed)"
        echo "=================================================="

        echo "📊 System Resources:"
        echo "  Memory usage:"
        free -h | sed 's/^/    /'
        echo "  Disk usage:"
        df -h | sed 's/^/    /'
        echo "  CPU info:"
        nproc | sed 's/^/    CPUs: /'

        echo "📋 Process Information:"
        echo "  Running processes:"
        ps aux | head -20 | sed 's/^/    /'

        echo "📂 File System State:"
        echo "  Current directory:"
        pwd | sed 's/^/    /'
        echo "  Directory contents:"
        ls -la | sed 's/^/    /'

        echo "🐍 Python Environment:"
        python3 --version | sed 's/^/    /'
        python3 -c "import sys; print('Python path:', sys.path)" | sed 's/^/    /'

        echo "📄 LaTeX Environment:"
        which pdflatex | sed 's/^/    pdflatex: /'
        which bibtex | sed 's/^/    bibtex: /' || echo "    bibtex: not found"

        echo "📋 Environment Variables:"
        env | grep -E "^(PATH|MANUSCRIPT_PATH|TEXMF|R_LIBS)" | sed 's/^/    /'

        echo "🐳 Docker Image Information:"
        echo "  Expected image: ${{ needs.prepare.outputs.docker_image }}"
        echo "  rxiv-maker version: ${{ needs.prepare.outputs.rxiv_version }}"
        echo "  Container hostname: $(hostname || echo 'unknown')"

        echo "🔍 Build Files Search:"
        find . -name "*.pdf" -o -name "*.log" -o -name "*.aux" | sed 's/^/    /'

        echo "=================================================="

    - name: Prepare release assets
      id: prepare-release
      run: |
        # Create release directory
        mkdir -p release

        # Copy PDF with descriptive name
        MANUSCRIPT_DIR="${{ needs.prepare.outputs.manuscript_path }}"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        BRANCH_NAME=$(echo ${{ github.ref_name }} | sed 's/[^a-zA-Z0-9]/_/g')

        # Use the existing PDF if it has a custom name, otherwise use generic name
        if [ -f "${MANUSCRIPT_DIR}"/*.pdf ]; then
          PDF_NAME=$(ls "${MANUSCRIPT_DIR}"/*.pdf | head -1 | xargs basename)
          cp "${MANUSCRIPT_DIR}/${PDF_NAME}" "release/${PDF_NAME}"
        else
          PDF_NAME="manuscript_${BRANCH_NAME}_${TIMESTAMP}.pdf"
          # Try both possible PDF locations for robustness
          if [ -f "output/${MANUSCRIPT_DIR}.pdf" ]; then
            cp "output/${MANUSCRIPT_DIR}.pdf" "release/${PDF_NAME}"
          elif [ -f "output/MANUSCRIPT.pdf" ]; then
            cp "output/MANUSCRIPT.pdf" "release/${PDF_NAME}"
          else
            echo "❌ ERROR: No PDF found in output directory"
            exit 1
          fi
        fi

        # Set output for later steps
        echo "PDF_NAME=${PDF_NAME}" >> $GITHUB_OUTPUT
        echo "PDF_FILENAME=${PDF_NAME}" >> $GITHUB_ENV

        # Set build date for use in release description and build info
        echo "BUILD_DATE=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_ENV

        # Create build info
        cat > release/build_info.txt << EOF
        Build Information:
        - Repository: ${{ github.repository }}
        - Branch: ${{ github.ref_name }}
        - Commit: ${{ github.sha }}
        - Manuscript Path: ${{ needs.prepare.outputs.manuscript_path }}
        - Build Date: ${{ env.BUILD_DATE }}
        - Workflow: ${{ github.workflow }}
        - Run ID: ${{ github.run_id }}
        EOF

    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: generated-pdf
        path: |
          release/*.pdf
          release/build_info.txt
        retention-days: 90

    - name: Set build outputs
      id: build-result
      run: |
        # Find the generated PDF
        pdf_file=$(find release -name "*.pdf" | head -1)
        if [ -n "$pdf_file" ]; then
          echo "pdf-path=$pdf_file" >> $GITHUB_OUTPUT
          echo "artifact-name=generated-pdf" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ PDF build successful: $pdf_file"
        else
          echo "pdf-path=" >> $GITHUB_OUTPUT
          echo "artifact-name=" >> $GITHUB_OUTPUT
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ PDF build failed: no PDF found"
        fi

    - name: Get most recent tag
      id: get-tag
      run: |
        # For tag-triggered builds, use the triggering tag directly
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref_type }}" = "tag" ]; then
          TAG="${{ github.ref_name }}"
          echo "Using triggering tag: $TAG"
        else
          # For manual triggers, fetch all tags and get the most recent one
          git fetch --tags
          TAG=$(git tag --sort=-creatordate | head -n 1)
          echo "Using most recent tag: $TAG"
        fi

        echo "MOST_RECENT_TAG=$TAG" >> $GITHUB_ENV
        echo "MOST_RECENT_TAG=$TAG" >> $GITHUB_OUTPUT

    - name: Determine release existence for MOST_RECENT_TAG
      id: tag-check
      run: |
        # Use the MOST_RECENT_TAG from environment
        echo "Checking release existence for tag: $MOST_RECENT_TAG"
        if [ -n "$MOST_RECENT_TAG" ]; then
          RELEASE_JSON=$(gh release view "$MOST_RECENT_TAG" --json tagName --jq '.tagName' 2>/dev/null || echo "")
          if [ "$RELEASE_JSON" = "$MOST_RECENT_TAG" ]; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "release_exists=false" >> $GITHUB_OUTPUT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MOST_RECENT_TAG: ${{ env.MOST_RECENT_TAG }}

    - name: Create v0.0.1 tag if no tag exists (manual triggers only)
      if: env.MOST_RECENT_TAG == '' && github.event_name == 'workflow_dispatch' && github.event.repository.fork == false
      run: |
        echo "No tags found in manual trigger, creating initial v0.0.1 tag"
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag v0.0.1
        git push origin v0.0.1
        echo "MOST_RECENT_TAG=v0.0.1" >> $GITHUB_ENV

    - name: Set fallback tag for manual triggers without tags
      if: env.MOST_RECENT_TAG == '' && github.event_name == 'workflow_dispatch'
      run: |
        echo "Manual trigger with no existing tags"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FALLBACK_TAG="manual-build-${TIMESTAMP}"
        echo "Using fallback identifier: ${FALLBACK_TAG}"
        echo "MOST_RECENT_TAG=${FALLBACK_TAG}" >> $GITHUB_ENV

    - name: Set fallback tag for forks
      if: env.MOST_RECENT_TAG == '' && github.event.repository.fork == true
      run: |
        echo "Running on a fork, using fallback tag naming"
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        FALLBACK_TAG="fork-build-${TIMESTAMP}"
        echo "MOST_RECENT_TAG=${FALLBACK_TAG}" >> $GITHUB_ENV

    - name: Create release for most recent tag if missing (non-fork only)
      if: env.MOST_RECENT_TAG != '' && steps.tag-check.outputs.release_exists == 'false' && github.event.repository.fork == false
      run: |
        gh release create "${MOST_RECENT_TAG}" \
          release/*.pdf \
          release/build_info.txt \
          --title "Release ${MOST_RECENT_TAG}" \
          --notes "## 📄 PDF Build for Tag \`${MOST_RECENT_TAG}\`\nThis release was automatically created for the most recent tag."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        MOST_RECENT_TAG: ${{ env.MOST_RECENT_TAG }}

    - name: Create or update most recent tag release (non-fork only)
      if: github.event.repository.fork == false
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.MOST_RECENT_TAG }}
        name: "Release ${{ env.MOST_RECENT_TAG }}"
        body: |
          ## 📄 PDF Build for Tag `${{ env.MOST_RECENT_TAG }}`

          **Manuscript:** `${{ needs.prepare.outputs.manuscript_path }}`
          **Branch:** `${{ github.ref_name }}`
          **Commit:** `${{ github.sha }}`
          **Build Date:** ${{ env.BUILD_DATE }}

          ### 📥 Download Links
          - **PDF:** [${{ steps.prepare-release.outputs.PDF_NAME }}](https://github.com/${{ github.repository }}/releases/download/${{ env.MOST_RECENT_TAG }}/${{ steps.prepare-release.outputs.PDF_NAME }})
          - **Build Info:** [build_info.txt](https://github.com/${{ github.repository }}/releases/download/${{ env.MOST_RECENT_TAG }}/build_info.txt)

          ### 🔗 Direct Download URL
          ```
          https://github.com/${{ github.repository }}/releases/latest/download/${{ steps.prepare-release.outputs.PDF_NAME }}
          ```

          ---
          *This release is automatically updated when a tagged commit is pushed or when the action is manually triggered.*
        files: |
          release/*.pdf
          release/build_info.txt

    - name: Fork notification
      if: github.event.repository.fork == true
      run: |
        echo "=================================================="
        echo "🍴 Fork Repository Detected"
        echo "=================================================="
        echo "This workflow is running on a forked repository."
        echo "PDF has been generated and uploaded as an artifact."
        echo "To access your PDF:"
        echo "1. Go to the Actions tab of your fork"
        echo "2. Click on this workflow run"
        echo "3. Download the 'generated-pdf' artifact"
        echo ""
        echo "Note: Releases cannot be created on forks due to"
        echo "GitHub permissions. The PDF is available as an"
        echo "workflow artifact for 90 days."
        echo "=================================================="
