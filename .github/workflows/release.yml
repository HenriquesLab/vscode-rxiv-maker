name: Release and Binary Distribution

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.4.8)'
        required: true
        type: string

permissions:
  contents: write
  actions: write
  id-token: write  # Required for PyPI trusted publishing

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8

jobs:
  # First job: Run comprehensive tests
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    timeout-minutes: 35
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
      fail-fast: false
      max-parallel: 8  # Increase parallelism for releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: release-${{ runner.os }}-${{ runner.arch }}-py${{ matrix.python-version }}
          enable-cache: true

      - name: Run unit tests
        uses: ./.github/actions/test-execution
        with:
          test-type: unit
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}

  # Second job: Build Python packages
  build-python:
    name: Build Python Packages
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: build-python-${{ runner.os }}
          enable-cache: true

      - name: Build Python packages
        run: uv build

      - name: Verify packages
        run: |
          python -m pip install --upgrade pip twine
          python -m twine check dist/*

      - name: Upload Python packages
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: python-packages
          path: dist/

  # Third job: Build binaries for each platform
  build-binaries:
    name: Build Binary (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 45
    needs: test
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x64
            binary_name: rxiv
            artifact_name: rxiv-maker-linux-x64
          - os: windows-latest
            platform: windows
            arch: x64
            binary_name: rxiv.exe
            artifact_name: rxiv-maker-windows-x64
          - os: macos-13  # Intel Mac for x64 build
            platform: macos
            arch: x64
            binary_name: rxiv
            artifact_name: rxiv-maker-macos-x64-intel
          - os: macos-latest  # Apple Silicon Mac for arm64 build
            platform: macos
            arch: arm64
            binary_name: rxiv
            artifact_name: rxiv-maker-macos-arm64
      fail-fast: false
      max-parallel: 4  # Build all platforms in parallel

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: binary-${{ matrix.platform }}-${{ matrix.arch }}
          enable-cache: true

      - name: Install additional build dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get install -y upx-ucl

      - name: Install additional build dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install upx

      - name: Install PyInstaller
        run: uv pip install pyinstaller

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Create PyInstaller spec file
        shell: bash
        run: |
          cat > rxiv-maker.spec << 'EOF'
          # -*- mode: python ; coding: utf-8 -*-
          import sys
          from pathlib import Path

          block_cipher = None

          # Add the src directory to Python path
          src_path = str(Path.cwd() / 'src')
          if src_path not in sys.path:
              sys.path.insert(0, src_path)

          a = Analysis(
              ['src/rxiv_maker/rxiv_maker_cli.py'],
              pathex=[src_path],
              binaries=[],
              data=[
                  ('src/rxiv_maker/tex', 'rxiv_maker/tex'),
                  ('src/rxiv_maker/install/templates', 'rxiv_maker/install/templates'),
                  ('src/rxiv_maker/utils/schemas', 'rxiv_maker/utils/schemas'),
              ],
              hiddenimports=[
                  'rxiv_maker',
                  'rxiv_maker.cli',
                  'rxiv_maker.commands',
                  'rxiv_maker.converters',
                  'rxiv_maker.processors',
                  'rxiv_maker.utils',
                  'rxiv_maker.validators',
                  'rxiv_maker.install',
                  'pkg_resources.py2_warn',
              ],
              hookspath=[],
              hooksconfig={},
              runtime_hooks=[],
              excludes=[],
              win_no_prefer_redirects=False,
              win_private_assemblies=False,
              cipher=block_cipher,
              noarchive=False,
          )

          pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

          exe = EXE(
              pyz,
              a.scripts,
              a.binaries,
              a.zipfiles,
              a.datas,
              [],
              name='${{ matrix.binary_name }}',
              debug=False,
              bootloader_ignore_signals=False,
              strip=False,
              upx=True,
              upx_exclude=[],
              runtime_tmpdir=None,
              console=True,
              disable_windowed_traceback=False,
              argv_emulation=False,
              target_arch=None,
              codesign_identity=None,
              entitlements_file=None,
          )
          EOF

      - name: Build binary with PyInstaller
        shell: bash
        run: |
          echo "Building binary for ${{ matrix.platform }}-${{ matrix.arch }}..."
          uv run pyinstaller rxiv-maker.spec --clean --noconfirm

          # Verify the binary was created
          if [ -f "dist/${{ matrix.binary_name }}" ]; then
            echo "✅ Binary created successfully: dist/${{ matrix.binary_name }}"
            ls -la dist/
          else
            echo "❌ Binary not found in dist/"
            ls -la dist/ || echo "dist/ directory doesn't exist"
            exit 1
          fi

      - name: Test binary functionality
        shell: bash
        run: |
          echo "🧪 Testing binary functionality..."

          # Basic command tests
          echo "Testing basic commands..."
          ./dist/${{ matrix.binary_name }} --version
          ./dist/${{ matrix.binary_name }} --help

          # Test binary imports and core functionality
          echo "Testing binary can initialize a project..."
          mkdir -p test-workspace && cd test-workspace

          # Test init command
          ../dist/${{ matrix.binary_name }} init test-project --no-interactive || echo "Init command failed"

          if [ -d "test-project" ]; then
            echo "✅ Binary can initialize projects"

            # Test that required files were created
            if [ -f "test-project/00_CONFIG.yml" ] && [ -f "test-project/01_MAIN.md" ]; then
              echo "✅ Binary created required project files"
            else
              echo "❌ Binary failed to create required files"
              ls -la test-project/
            fi

            # Test validate command (should work without LaTeX)
            cd test-project
            ../../dist/${{ matrix.binary_name }} validate --no-doi || echo "Validation failed (expected without LaTeX)"
            cd ..
          else
            echo "❌ Binary failed to initialize project"
          fi

          cd ..
          echo "✅ Binary functionality test completed"

      - name: Compress binary (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          cd dist
          if command -v upx >/dev/null 2>&1; then
            echo "Compressing binary with UPX..."
            upx --best ${{ matrix.binary_name }} || echo "UPX compression failed, continuing..."
          fi
          tar -czf ${{ matrix.artifact_name }}.tar.gz ${{ matrix.binary_name }}
          echo "Created: ${{ matrix.artifact_name }}.tar.gz"

      - name: Compress binary (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          cd dist
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.artifact_name }}.zip
          Write-Host "Created: ${{ matrix.artifact_name }}.zip"

      - name: Upload binary artifact
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: ${{ matrix.artifact_name }}
          path: |
            dist/${{ matrix.artifact_name }}.tar.gz
            dist/${{ matrix.artifact_name }}.zip
          retention-days: 30

  # Fourth job: Build example PDF
  build-example-pdf:
    name: Build Example PDF
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: pdf-build
          enable-cache: true

      - name: Install LaTeX dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y texlive-latex-extra texlive-fonts-recommended texlive-fonts-extra texlive-bibtex-extra biber

      - name: Generate example PDF
        run: |
          echo "Building example PDF from EXAMPLE_MANUSCRIPT..."
          make pdf MANUSCRIPT_PATH=EXAMPLE_MANUSCRIPT

          # Verify PDF was created
          if [ -f "output/EXAMPLE_MANUSCRIPT.pdf" ]; then
            echo "✅ PDF generated successfully"
            ls -la output/EXAMPLE_MANUSCRIPT.pdf

            # Basic validation - check file size
            PDF_SIZE=$(stat -c%s "output/EXAMPLE_MANUSCRIPT.pdf")
            if [ "$PDF_SIZE" -gt 10000 ]; then
              echo "✅ PDF size looks reasonable: $PDF_SIZE bytes"
            else
              echo "❌ PDF size seems too small: $PDF_SIZE bytes"
              exit 1
            fi
          else
            echo "❌ PDF generation failed"
            ls -la output/
            exit 1
          fi

      - name: Upload example PDF
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: example-pdf
          path: output/EXAMPLE_MANUSCRIPT.pdf

  # Fifth job: Create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [test, build-python, build-binaries, build-example-pdf]

    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: ./.github/actions/artifact-management
        with:
          action: download-all
          path: artifacts/
          merge-multiple: true

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Rxiv-Maker ${{ steps.get_version.outputs.tag }}

          This release includes pre-compiled binaries and an example PDF generated with Rxiv-Maker to showcase its capabilities.

          ### 📦 Installation Options

          #### 🍺 Homebrew (macOS/Linux)
          ```bash
          brew tap henriqueslab/rxiv-maker
          brew install rxiv-maker
          ```

          #### 🪣 Scoop (Windows)
          ```powershell
          scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker
          scoop install rxiv-maker
          ```

          #### 🐍 Python Package (All Platforms)
          ```bash
          pip install rxiv-maker
          ```

          #### 📥 Direct Binary Download
          Download the appropriate binary for your platform from the assets below:
          - **Linux x64**: `rxiv-maker-linux-x64.tar.gz`
          - **Windows x64**: `rxiv-maker-windows-x64.zip`
          - **macOS Intel**: `rxiv-maker-macos-x64-intel.tar.gz`
          - **macOS Apple Silicon**: `rxiv-maker-macos-arm64.tar.gz`

          #### 📄 Example Output
          - **Example PDF**: `EXAMPLE_MANUSCRIPT.pdf` - See what Rxiv-Maker can generate!

          ### 🔗 Quick Start
          ```bash
          rxiv init my-paper     # Initialize new manuscript
          cd my-paper
          rxiv pdf               # Generate PDF
          ```

          ### 📖 Documentation
          - [Installation Guide](https://github.com/henriqueslab/rxiv-maker#installation)
          - [User Guide](https://github.com/henriqueslab/rxiv-maker#usage)
          - [Examples](https://github.com/henriqueslab/rxiv-maker/tree/main/EXAMPLE_MANUSCRIPT)

          ---
          *Binary distributions are self-contained and don't require Python installation.*
          EOF

      - name: Create Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.get_version.outputs.tag }} \
            --title "Rxiv-Maker ${{ steps.get_version.outputs.tag }}" \
            --notes-file release_notes.md \
            artifacts/python-packages/* \
            artifacts/*.tar.gz \
            artifacts/*.zip \
            artifacts/EXAMPLE_MANUSCRIPT.pdf \
            README.md \
            CHANGELOG.md \
            LICENSE

  # Fifth job: Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: release

    steps:
      - name: Download Python packages
        uses: ./.github/actions/artifact-management
        with:
          action: download
          name: python-packages
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          verbose: true
          verify-metadata: true

  # Sixth job: Trigger Docker image sync for new releases
  sync-docker-version:
    name: Sync Docker Version
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [create-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.ref_name }}"
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Trigger Docker image build
        run: |
          echo "Triggering Docker image build for release ${{ steps.get_version.outputs.tag }}"

          # Use DOCKER_SYNC_TOKEN if available, otherwise fall back to GITHUB_TOKEN
          if [ -n "${{ secrets.DOCKER_SYNC_TOKEN }}" ]; then
            AUTH_TOKEN="${{ secrets.DOCKER_SYNC_TOKEN }}"
            echo "Using dedicated DOCKER_SYNC_TOKEN for Docker repository dispatch..."
          else
            AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            echo "Using fallback GITHUB_TOKEN for Docker repository dispatch..."
            echo "⚠️ For better security, consider setting DOCKER_SYNC_TOKEN secret"
          fi

          RESPONSE=$(curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $AUTH_TOKEN" \
            -H "User-Agent: rxiv-maker-sync" \
            -w "HTTP_CODE:%{http_code}" \
            -s \
            https://api.github.com/repos/HenriquesLab/docker-rxiv-maker/dispatches \
            -d '{
              "event_type": "build-docker-image",
              "client_payload": {
                "version": "${{ steps.get_version.outputs.version }}",
                "source_repo": "${{ github.repository }}",
                "source_commit": "${{ github.sha }}",
                "trigger_type": "release_sync"
              }
            }' 2>&1)

          HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_CODE:" | cut -d: -f2)

          if [ "$HTTP_CODE" = "204" ]; then
            echo "✅ Successfully triggered Docker image build"
          elif [ "$HTTP_CODE" = "401" ]; then
            echo "❌ Authentication failed - check DOCKER_SYNC_TOKEN or GITHUB_TOKEN permissions"
            echo "Response: $RESPONSE"
            # Don't fail the release for Docker sync issues
            echo "⚠️ Docker sync failed but continuing with release"
          elif [ "$HTTP_CODE" = "404" ]; then
            echo "❌ Repository not found or no dispatch permission"
            echo "Response: $RESPONSE"
            echo "⚠️ Docker sync failed but continuing with release"
          else
            echo "⚠️ Unexpected response from GitHub API (HTTP $HTTP_CODE)"
            echo "Response: $RESPONSE"
            echo "Continuing with release..."
          fi

      - name: Docker sync summary
        run: |
          echo "## 🐳 Docker Version Sync" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: Triggered Docker image build for release" >> $GITHUB_STEP_SUMMARY
          echo "- **Expected Image**: henriqueslab/rxiv-maker-base:v${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Monitor Docker build at [docker-rxiv-maker actions](https://github.com/HenriquesLab/docker-rxiv-maker/actions)" >> $GITHUB_STEP_SUMMARY

  # Seventh job: Orchestrate package manager updates
  update-package-managers:
    name: Update Package Managers
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [create-release, sync-docker-version]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          install-python-deps: false

      - name: Install orchestration dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install requests pyyaml

      - name: Get version
        id: get_version
        run: |
          VERSION="${{ github.ref_name }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_num=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Validate release readiness
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "🔍 Validating release readiness for ${{ steps.get_version.outputs.version }}"
          python scripts/orchestrate-release.py validate "${{ steps.get_version.outputs.version }}" || echo "Validation failed, continuing anyway"

      - name: Test package manager readiness
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "🧪 Testing package manager readiness..."
          python scripts/orchestrate-release.py test "${{ steps.get_version.outputs.version }}" || echo "Test failed, continuing anyway"

      - name: Orchestrate package manager updates
        id: orchestrate
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "🚀 Orchestrating package manager updates for ${{ steps.get_version.outputs.version }}"
          python scripts/orchestrate-release.py orchestrate "${{ steps.get_version.outputs.version }}" || echo "Package manager updates failed, continuing anyway"

      - name: Create package manager summary
        if: always()
        run: |
          echo "## 📦 Package Manager Updates" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.get_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.orchestrate.outcome }}" = "success" ]; then
            echo "### ✅ Update Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All package managers have been updated successfully:" >> $GITHUB_STEP_SUMMARY
            echo "- 🍺 **Homebrew**: Formula updated with new binaries and checksums" >> $GITHUB_STEP_SUMMARY
            echo "- 🪣 **Scoop**: Manifest updated with new binary and checksum" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Update Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some package manager updates failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
            echo "Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Homebrew (macOS/Linux):**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo 'brew tap henriqueslab/rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo 'brew install rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scoop (Windows):**" >> $GITHUB_STEP_SUMMARY
          echo '```powershell' >> $GITHUB_STEP_SUMMARY
          echo 'scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo 'scoop install rxiv-maker' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Handle package manager failures
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_MANAGER_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          echo "❌ Package manager updates failed"
          echo ""
          echo "This is not a critical failure for the release itself."
          echo "The GitHub release and PyPI package have been published successfully."
          echo "Package manager updates can be triggered manually if needed."
          echo ""
          echo "Manual update commands:"
          echo "  Homebrew: gh workflow run update-formula.yml -R henriqueslab/homebrew-rxiv-maker --field version=${{ steps.get_version.outputs.version }}"
          echo "  Scoop: gh workflow run update-manifest.yml -R henriqueslab/scoop-rxiv-maker --field version=${{ steps.get_version.outputs.version }}"

          echo "## ⚠️  Package Manager Update Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The main release was successful, but package manager updates failed." >> $GITHUB_STEP_SUMMARY
          echo "The GitHub release and PyPI package are available." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Manual package manager updates may be required:" >> $GITHUB_STEP_SUMMARY
          echo "- Check workflow logs for specific errors" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger updates manually using the GitHub Actions UI" >> $GITHUB_STEP_SUMMARY
          echo "- Contact maintainers if issues persist" >> $GITHUB_STEP_SUMMARY
