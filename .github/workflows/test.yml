name: CI/Test Pipeline

on:
  push:
    branches: [main, dev, dev-no-puppets]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/test.yml'
      - '.github/actions/**'
  pull_request:
    branches: [main, dev, dev-no-puppets]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'uv.lock'
      - '.github/workflows/test.yml'
      - '.github/actions/**'
  workflow_dispatch:
    inputs:
      test-scope:
        description: 'Test scope'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'quick'        # Lint + basic tests only
          - 'standard'     # Default: lint, test, integration, build
          - 'comprehensive' # All tests including performance, security, ecosystem
      python-versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.11,3.12'
        type: string
      os-matrix:
        description: 'Operating systems to test (comma-separated)'
        required: false
        default: 'ubuntu-latest,windows-latest,macos-latest'
        type: string
      include-ecosystem:
        description: 'Include ecosystem integration tests'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  FORCE_COLOR: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PYTHONIOENCODING: utf-8
  PYTHONUTF8: 1

jobs:
  setup:
    name: Setup Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      test-scope: ${{ steps.config.outputs.test-scope }}
      python-versions: ${{ steps.config.outputs.python-versions }}
      os-matrix: ${{ steps.config.outputs.os-matrix }}
      test-matrix: ${{ steps.config.outputs.test-matrix }}
      run-comprehensive: ${{ steps.config.outputs.run-comprehensive }}
      run-ecosystem: ${{ steps.config.outputs.run-ecosystem }}

    steps:
      - name: Configure test parameters
        id: config
        shell: bash
        run: |
          # Determine test scope
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            test_scope="${{ inputs.test-scope }}"
            python_versions="${{ inputs.python-versions }}"
            os_matrix="${{ inputs.os-matrix }}"
            run_ecosystem="${{ inputs.include-ecosystem }}"
          else
            # Auto-triggered (push/PR) - use standard scope with reduced matrix for stability
            test_scope="standard"
            python_versions="3.11,3.12"
            # Prioritize Ubuntu for most testing, reduce macOS/Windows burden
            if [[ "$GITHUB_EVENT_NAME" == "pull_request" ]]; then
              os_matrix="ubuntu-latest,macos-latest"
            else
              os_matrix="ubuntu-latest,windows-latest,macos-latest"
            fi
            run_ecosystem="false"
          fi

          echo "test-scope=$test_scope" >> $GITHUB_OUTPUT

          # Parse Python versions
          python_array=$(echo "$python_versions" | python3 -c "
          import sys, json
          versions = [v.strip() for v in sys.stdin.read().strip().split(',') if v.strip()]
          print(json.dumps(versions))
          ")
          echo "python-versions=$python_array" >> $GITHUB_OUTPUT

          # Parse OS matrix
          os_array=$(echo "$os_matrix" | python3 -c "
          import sys, json
          oses = [os.strip() for os in sys.stdin.read().strip().split(',') if os.strip()]
          print(json.dumps(oses))
          ")
          echo "os-matrix=$os_array" >> $GITHUB_OUTPUT

          # Create test matrix
          echo "test-matrix={\"os\": $os_array, \"python-version\": $python_array}" >> $GITHUB_OUTPUT

          # Set comprehensive flag
          if [ "$test_scope" = "comprehensive" ]; then
            echo "run-comprehensive=true" >> $GITHUB_OUTPUT
          else
            echo "run-comprehensive=false" >> $GITHUB_OUTPUT
          fi

          echo "run-ecosystem=$run_ecosystem" >> $GITHUB_OUTPUT

          # Summary
          echo "## Test Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Scope**: $test_scope" >> $GITHUB_STEP_SUMMARY
          echo "- **Python Versions**: $python_versions" >> $GITHUB_STEP_SUMMARY
          echo "- **Operating Systems**: $os_matrix" >> $GITHUB_STEP_SUMMARY
          echo "- **Ecosystem Testing**: $run_ecosystem" >> $GITHUB_STEP_SUMMARY

  test:
    name: Tests (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.test-matrix) }}
      fail-fast: false
      max-parallel: 6  # Optimized for better throughput
    timeout-minutes: 25  # Increased timeout for cross-platform stability

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: ${{ matrix.python-version }}
          cache-suffix: ${{ runner.os }}-${{ runner.arch }}-py${{ matrix.python-version }}
          enable-cache: true

      - name: Run unit tests
        uses: ./.github/actions/test-execution
        with:
          test-type: unit
          python-version: ${{ matrix.python-version }}
          os: ${{ matrix.os }}
          upload-coverage: ${{ matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest' }}

      - name: Upload test artifacts
        if: always()
        uses: ./.github/actions/artifact-management
        with:
          action: upload-test-results
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          matrix-os: ${{ matrix.os }}
          matrix-python: ${{ matrix.python-version }}

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [setup, test]
    if: needs.setup.outputs.test-scope != 'quick'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: integration-${{ runner.os }}-${{ runner.arch }}
          enable-cache: true

      - name: Cache LaTeX packages
        uses: actions/cache@v4
        with:
          path: |
            /usr/share/texlive
            /var/lib/texmf
            ~/.texlive
          key: latex-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}
          restore-keys: |
            latex-packages-${{ runner.os }}-

      - name: Install LaTeX
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-science \
            texlive-plain-generic

      - name: Test manuscript generation workflow
        run: |
          echo "Testing manuscript generation..."
          mkdir -p test-workspace && cd test-workspace

          uv run rxiv init test-manuscript --no-interrupt || echo "Init command failed"

          if [ -d "test-manuscript" ]; then
            echo "✅ Manuscript initialized successfully"
            cd test-manuscript
            uv run rxiv validate --no-doi || echo "Validation failed"
            cd ..
          fi
          cd ..

      - name: Run integration tests
        uses: ./.github/actions/test-execution
        with:
          test-type: integration

  multi-engine:
    name: Multi-Engine Tests
    runs-on: ubuntu-latest
    timeout-minutes: 35
    needs: [setup, test]
    if: needs.setup.outputs.test-scope == 'comprehensive'
    strategy:
      matrix:
        engine: [local, docker]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: multi-engine-${{ matrix.engine }}-${{ runner.os }}
          enable-cache: true

      - name: Cache LaTeX packages
        uses: actions/cache@v4
        with:
          path: |
            /usr/share/texlive
            /var/lib/texmf
            ~/.texlive
          key: latex-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/test.yml') }}
          restore-keys: |
            latex-packages-${{ runner.os }}-

      - name: Install LaTeX
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y --no-install-recommends \
            texlive-latex-base \
            texlive-latex-extra \
            texlive-fonts-recommended \
            texlive-fonts-extra \
            texlive-science \
            texlive-plain-generic

      - name: Cache Docker images
        if: matrix.engine == 'docker'
        uses: actions/cache@v4
        with:
          path: /tmp/.docker-cache
          key: docker-images-${{ runner.os }}-${{ hashFiles('src/docker/**') }}
          restore-keys: |
            docker-images-${{ runner.os }}-

      - name: Setup Docker (if needed)
        if: matrix.engine == 'docker'
        run: |
          # Ensure Docker is running
          sudo systemctl start docker
          sudo systemctl enable docker

          # Load cached images if available
          if [ -f "/tmp/.docker-cache/rxiv-maker-base.tar" ]; then
            echo "Loading cached Docker image..."
            docker load < /tmp/.docker-cache/rxiv-maker-base.tar
          else
            echo "Pulling fresh Docker image..."
            docker pull henriqueslab/rxiv-maker-base:latest || echo "Failed to pull image, will use local build"
            # Save image to cache
            mkdir -p /tmp/.docker-cache
            docker save henriqueslab/rxiv-maker-base:latest > /tmp/.docker-cache/rxiv-maker-base.tar || true
          fi

      - name: Run multi-engine integration tests
        run: |
          echo "Running multi-engine tests with engine: ${{ matrix.engine }}"

          # Run engine-specific tests
          uv run pytest tests/integration/test_example_manuscript.py::TestExampleManuscript::test_rxiv_pdf_example_manuscript_cli \
            --engine=${{ matrix.engine }} -v -s

          uv run pytest tests/integration/test_validation_workflow.py::TestValidationWorkflow::test_makefile_validation_valid_manuscript \
            --engine=${{ matrix.engine }} -v -s

          uv run pytest tests/integration/test_pypi_package_integration.py::TestPyPIPackageIntegration::test_cli_init_and_build_workflow \
            --engine=${{ matrix.engine }} -v -s

      - name: Upload multi-engine test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: multi-engine-test-results-${{ matrix.engine }}
          path: |
            test-results/
            logs/
          retention-days: 7

  build:
    name: Build & Test Distribution
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [setup, test]
    if: needs.setup.outputs.test-scope != 'quick'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: build-${{ runner.os }}
          enable-cache: true

      - name: Build package
        run: uv build

      - name: Test distribution
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          python -c "import rxiv_maker; print('✅ Package imports successfully')"
          python -c "from rxiv_maker import __version__; print(f'Version: {__version__}')"

      - name: Upload build artifacts
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: dist-${{ github.sha }}
          path: dist/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.run-comprehensive == 'true'
    timeout-minutes: 12

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: security-${{ runner.os }}
          enable-cache: true

      - name: Build package
        run: |
          python -m build --wheel --outdir dist/
          python -m pip install dist/*.whl

      - name: Run security scans
        uses: ./.github/actions/test-execution
        with:
          test-type: security

      - name: Upload security reports
        if: always()
        uses: ./.github/actions/artifact-management
        with:
          action: upload
          name: security-reports-${{ github.sha }}
          path: |
            bandit-report.json
            safety-report.json

  ecosystem:
    name: Ecosystem Testing
    runs-on: ${{ matrix.os }}
    needs: setup
    if: needs.setup.outputs.run-ecosystem == 'true'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            package-managers: "pypi"
          - os: windows-latest
            package-managers: "pypi,scoop"
          - os: macos-latest
            package-managers: "pypi,homebrew"
      fail-fast: false
    timeout-minutes: 25

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup environment
        uses: ./.github/actions/setup-environment
        with:
          python-version: '3.11'
          cache-suffix: ecosystem-${{ matrix.os }}
          enable-cache: true

      - name: Test PyPI installation
        if: contains(matrix.package-managers, 'pypi')
        run: |
          echo "🐍 Testing PyPI installation..."
          python -m pip install --upgrade pip

          # Test current build
          python -m pip install build
          python -m build --wheel --outdir dist/
          python -m pip install dist/*.whl

          if rxiv --version; then
            echo "✅ Local package installation successful"
          else
            echo "❌ Local package installation failed"
            exit 1
          fi

      - name: Test Homebrew installation
        if: contains(matrix.package-managers, 'homebrew') && runner.os == 'macOS'
        continue-on-error: true
        run: |
          echo "🍺 Testing Homebrew tap availability..."
          if command -v brew &> /dev/null; then
            brew tap henriqueslab/rxiv-maker || echo "Tap not available (expected for new projects)"
          else
            echo "Homebrew not available in CI"
          fi

      - name: Test Scoop installation
        if: contains(matrix.package-managers, 'scoop') && runner.os == 'Windows'
        continue-on-error: true
        run: |
          Write-Host "🪣 Testing Scoop bucket availability..."
          if (Get-Command scoop -ErrorAction SilentlyContinue) {
            try {
              scoop bucket add henriqueslab https://github.com/henriqueslab/scoop-rxiv-maker
              Write-Host "✅ Bucket added successfully"
            } catch {
              Write-Host "Bucket not available (expected for new projects)"
            }
          } else {
            Write-Host "Scoop not available in CI"
          }
        shell: powershell

  # Check for version changes and trigger Docker sync
  docker-version-sync:
    name: Docker Version Sync
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test]
    if: github.event_name == 'push' && (github.ref_name == 'main' || github.ref_name == 'dev-no-puppets')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Check for version file changes
        id: check-version
        run: |
          # Check if version file changed in this push
          if git diff --name-only HEAD~1 HEAD | grep -q "src/rxiv_maker/__version__.py"; then
            echo "Version file changed"

            # Get current version
            VERSION=$(python3 -c "
            import sys
            sys.path.insert(0, 'src')
            from rxiv_maker.__version__ import __version__
            print(__version__)
            ")

            # Get previous version if possible
            PREV_VERSION=$(git show HEAD~1:src/rxiv_maker/__version__.py | python3 -c "
            import sys
            exec(sys.stdin.read())
            print(__version__)
            " 2>/dev/null || echo "unknown")

            echo "Previous version: $PREV_VERSION"
            echo "Current version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT

            if [ "$PREV_VERSION" != "$VERSION" ]; then
              echo "Version changed from $PREV_VERSION to $VERSION"
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "Version file changed but version is the same"
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version file not changed"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Docker image build
        if: steps.check-version.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            console.log(`Triggering local Docker image build for version ${{ steps.check-version.outputs.version }}`);

            try {
              const result = await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'build-docker-base.yml',
                ref: 'main',
                inputs: {
                  rxiv_version: '${{ steps.check-version.outputs.version }}',
                  tag: 'v${{ steps.check-version.outputs.version }}',
                  platforms: 'linux/amd64,linux/arm64'
                }
              });

              console.log('✅ Successfully triggered local Docker image build');
              console.log(`Workflow dispatch ID: ${result.data.id || 'N/A'}`);
            } catch (error) {
              console.log('⚠️ Docker sync error:', error.message);
              console.log('Continuing with CI pipeline...');
            }

      - name: Docker sync notification
        if: steps.check-version.outputs.changed == 'true'
        run: |
          echo "## 🐳 Docker Version Sync Triggered" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ steps.check-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: Triggered Docker image build" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [setup, test, integration, multi-engine, build, security, ecosystem, docker-version-sync]
    if: always()

    steps:
      - name: Generate summary
        run: |
          echo "# CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope**: ${{ needs.setup.outputs.test-scope }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

          # Job results
          jobs=(
            "test:Unit Tests"
            "integration:Integration Tests"
            "build:Build & Distribution"
            "security:Security Scan"
            "ecosystem:Ecosystem Testing"
            "docker-version-sync:Docker Version Sync"
          )

          for job_info in "${jobs[@]}"; do
            job_name="${job_info%%:*}"
            job_title="${job_info#*:}"

            # Get job result using needs context
            case $job_name in
              "test") result="${{ needs.test.result }}" ;;
              "integration") result="${{ needs.integration.result }}" ;;
              "build") result="${{ needs.build.result }}" ;;
              "security") result="${{ needs.security.result }}" ;;
              "ecosystem") result="${{ needs.ecosystem.result }}" ;;
              "docker-version-sync") result="${{ needs.docker-version-sync.result }}" ;;
            esac

            case $result in
              "success") echo "✅ **$job_title**: Passed" >> $GITHUB_STEP_SUMMARY ;;
              "failure") echo "❌ **$job_title**: Failed" >> $GITHUB_STEP_SUMMARY ;;
              "cancelled") echo "⚠️ **$job_title**: Cancelled" >> $GITHUB_STEP_SUMMARY ;;
              "skipped") echo "⏭️ **$job_title**: Skipped" >> $GITHUB_STEP_SUMMARY ;;
              *) echo "❓ **$job_title**: $result" >> $GITHUB_STEP_SUMMARY ;;
            esac
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
