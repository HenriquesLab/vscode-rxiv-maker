name: 'Setup Development Environment'
description: 'Unified setup for Python, UV, and system dependencies across workflows'
inputs:
  python-version:
    description: 'Python version to install'
    required: false
    default: '3.11'
  enable-cache:
    description: 'Enable UV cache'
    required: false
    default: 'true'
  cache-suffix:
    description: 'Additional cache key suffix'
    required: false
    default: ''
  install-system-deps:
    description: 'Install system dependencies'
    required: false
    default: 'true'
  install-python-deps:
    description: 'Install Python dependencies with UV'
    required: false
    default: 'true'

outputs:
  python-version:
    description: 'Installed Python version'
    value: ${{ steps.setup-python.outputs.python-version }}
  cache-hit:
    description: 'Whether cache was hit'
    value: ${{ steps.setup-uv.outputs.cache-hit }}

runs:
  using: 'composite'
  steps:
    - name: Set up Python ${{ inputs.python-version }}
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        cache: 'pip'

    - name: Install UV
      id: setup-uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: ${{ inputs.enable-cache }}
        cache-suffix: ${{ runner.os }}-${{ runner.arch }}-${{ inputs.cache-suffix }}
        cache-dependency-glob: "**/uv.lock"
        prune-cache: true
        ignore-nothing-to-cache: true
      continue-on-error: true  # Don't fail on cache issues

    - name: Cache system dependencies (Linux)
      if: inputs.install-system-deps == 'true' && runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: |
          /var/cache/apt
          /var/lib/apt
        key: apt-deps-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('.github/actions/setup-environment/action.yml') }}
        restore-keys: |
          apt-deps-${{ runner.os }}-${{ runner.arch }}-
          apt-deps-${{ runner.os }}-

    - name: Install system dependencies (Linux)
      if: inputs.install-system-deps == 'true' && runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends \
          build-essential \
          libfreetype6-dev \
          libjpeg-dev \
          libpng-dev \
          libtiff-dev \
          libwebp-dev \
          libopenjp2-7-dev \
          zlib1g-dev \
          liblcms2-dev \
          libffi-dev \
          pkg-config \
          git

    - name: Cache Homebrew packages (macOS)
      if: inputs.install-system-deps == 'true' && runner.os == 'macOS'
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Homebrew
          /opt/homebrew
        key: homebrew-deps-${{ runner.os }}-${{ runner.arch }}-${{ hashFiles('.github/actions/setup-environment/action.yml') }}
        restore-keys: |
          homebrew-deps-${{ runner.os }}-${{ runner.arch }}-
          homebrew-deps-${{ runner.os }}-

    - name: Install system dependencies (macOS)
      if: inputs.install-system-deps == 'true' && runner.os == 'macOS'
      shell: bash
      run: |
        # Update Homebrew and install dependencies efficiently
        brew update --quiet
        brew install --quiet \
          freetype \
          jpeg \
          libpng \
          libtiff \
          webp \
          openjpeg \
          zlib \
          lcms2 \
          libffi \
          pkg-config

    - name: Install system dependencies (Windows)
      if: inputs.install-system-deps == 'true' && runner.os == 'Windows'
      shell: powershell
      run: |
        Write-Host "Setting up Windows dependencies..."
        # Install chocolatey if not present
        if (!(Get-Command choco -ErrorAction SilentlyContinue)) {
          Write-Host "Installing Chocolatey..."
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        }
        Write-Host "Windows system dependencies configured"

    - name: Install Python dependencies
      if: inputs.install-python-deps == 'true'
      shell: bash
      run: |
        # Install Python dependencies and package in development mode with optimized flags
        export UV_CACHE_DIR="$HOME/.cache/uv"
        export UV_PYTHON_PREFERENCE="only-managed"

        # Try sync with optimized settings
        if uv sync --frozen --no-dev; then
          echo "✅ Dependencies synced successfully (frozen mode)"
        elif uv sync; then
          echo "✅ Dependencies synced successfully (standard mode)"
        else
          echo "⚠️ Sync failed, attempting manual installation..."
          # Fallback to manual dependency installation
          uv pip install -e . --no-deps || {
            echo "❌ Manual installation failed, trying with --force-reinstall"
            uv pip install -e . --force-reinstall
          }
        fi

        # Also install in system Python for subprocess calls in integration tests (only if available)
        if command -v python >/dev/null 2>&1; then
          python -m pip install -e . --quiet || echo "⚠️ System Python installation failed (might be expected)"
        fi

    - name: Verify CLI installation
      if: inputs.install-python-deps == 'true'
      shell: bash
      run: |
        # Test that rxiv command is available
        which rxiv || echo "rxiv not in PATH"
        uv run rxiv --version || echo "rxiv command failed"
        # Also test system Python access
        python -c "import rxiv_maker; print('✅ System Python can import rxiv_maker')" || echo "⚠️ System Python import failed"
